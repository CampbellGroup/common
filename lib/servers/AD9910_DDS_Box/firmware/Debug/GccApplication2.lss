
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00001634  000016c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001634  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800170  00800170  00001738  2**0
                  ALLOC
  3 .stab         00000e70  00000000  00000000  00001738  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000275  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00002820  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f6c  00000000  00000000  000029a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000995  00000000  00000000  0000490c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f42  00000000  00000000  000052a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  000061e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000604  00000000  00000000  0000657c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001161  00000000  00000000  00006b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00007ce1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e3       	ldi	r30, 0x34	; 52
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 37       	cpi	r26, 0x70	; 112
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e7       	ldi	r26, 0x70	; 112
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 3a       	cpi	r26, 0xA1	; 161
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
volatile unsigned long long int dataInt;
volatile int uCheckSum=0;
volatile int deviceIdx=0;

int main(void)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	c4 55       	subi	r28, 0x54	; 84
      b0:	d0 40       	sbci	r29, 0x00	; 0
      b2:	0f b6       	in	r0, 0x3f	; 63
      b4:	f8 94       	cli
      b6:	de bf       	out	0x3e, r29	; 62
      b8:	0f be       	out	0x3f, r0	; 63
      ba:	cd bf       	out	0x3d, r28	; 61
	char synclk=0;
	_SFR_IO8(MR_DDR) |= (uint8_t)(1 << MR_DDRn); // MR set direction
      bc:	21 9a       	sbi	0x04, 1	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      be:	8f e9       	ldi	r24, 0x9F	; 159
      c0:	9f e0       	ldi	r25, 0x0F	; 15
      c2:	01 97       	sbiw	r24, 0x01	; 1
      c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x1c>
      c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x22>
      c8:	00 00       	nop
	//_SFR_IO8(MR_PORT) |= (uint8_t)(1 << MR_PORTn); // MR High
	_delay_ms(1);
	_SFR_IO8(MR_PORT) &= (uint8_t)(0 << MR_PORTn); // MR Low
      ca:	85 b1       	in	r24, 0x05	; 5
      cc:	15 b8       	out	0x05, r1	; 5
      ce:	8f e9       	ldi	r24, 0x9F	; 159
      d0:	9f e0       	ldi	r25, 0x0F	; 15
      d2:	01 97       	sbiw	r24, 0x01	; 1
      d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x2c>
      d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x32>
      d8:	00 00       	nop
	_delay_ms(1);
	// SPI
	setup_spi(SPI_MODE_0, SPI_MSB, SPI_NO_INTERRUPT, SPI_MSTR_CLK128);
      da:	80 e0       	ldi	r24, 0x00	; 0
      dc:	60 e0       	ldi	r22, 0x00	; 0
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	40 e0       	ldi	r20, 0x00	; 0
      e2:	50 e0       	ldi	r21, 0x00	; 0
      e4:	23 e0       	ldi	r18, 0x03	; 3
      e6:	0e 94 65 07 	call	0xeca	; 0xeca <setup_spi>
	//DDS dds1(CS_DDR,CS_DDRn,CS_PORT,CS_PORTn,0x04,DDB0,0x05,PORTB0); // Setup DDS
	DDS dds1(CS_DDR,CS_DDRn,CS_PORT,CS_PORTn,IO_DDR,IO_DDRn,IO_PORT,IO_PORTn); // Setup DDS
      ea:	ce 01       	movw	r24, r28
      ec:	01 96       	adiw	r24, 0x01	; 1
      ee:	6e e1       	ldi	r22, 0x1E	; 30
      f0:	71 e0       	ldi	r23, 0x01	; 1
      f2:	40 e2       	ldi	r20, 0x20	; 32
      f4:	51 e0       	ldi	r21, 0x01	; 1
      f6:	24 e2       	ldi	r18, 0x24	; 36
      f8:	31 e0       	ldi	r19, 0x01	; 1
      fa:	06 e2       	ldi	r16, 0x26	; 38
      fc:	11 e0       	ldi	r17, 0x01	; 1
      fe:	0f 2e       	mov	r0, r31
     100:	fa e2       	ldi	r31, 0x2A	; 42
     102:	ef 2e       	mov	r14, r31
     104:	f1 e0       	ldi	r31, 0x01	; 1
     106:	ff 2e       	mov	r15, r31
     108:	f0 2d       	mov	r31, r0
     10a:	0f 2e       	mov	r0, r31
     10c:	fc e2       	ldi	r31, 0x2C	; 44
     10e:	cf 2e       	mov	r12, r31
     110:	f1 e0       	ldi	r31, 0x01	; 1
     112:	df 2e       	mov	r13, r31
     114:	f0 2d       	mov	r31, r0
     116:	0f 2e       	mov	r0, r31
     118:	f0 e3       	ldi	r31, 0x30	; 48
     11a:	af 2e       	mov	r10, r31
     11c:	f1 e0       	ldi	r31, 0x01	; 1
     11e:	bf 2e       	mov	r11, r31
     120:	f0 2d       	mov	r31, r0
     122:	0f 2e       	mov	r0, r31
     124:	f2 e3       	ldi	r31, 0x32	; 50
     126:	8f 2e       	mov	r8, r31
     128:	f1 e0       	ldi	r31, 0x01	; 1
     12a:	9f 2e       	mov	r9, r31
     12c:	f0 2d       	mov	r31, r0
     12e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_>
	// USART
	// Go to USART.H AND CHANGE YOUR FOSC AND BAUD
	USART_Init(MYUBRR); // Initializes the serial communication
     132:	87 e6       	ldi	r24, 0x67	; 103
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 a5 07 	call	0xf4a	; 0xf4a <_Z10USART_Initj>
	UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt (USART_RXC)
     13a:	e1 ec       	ldi	r30, 0xC1	; 193
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	80 81       	ld	r24, Z
     140:	80 68       	ori	r24, 0x80	; 128
     142:	80 83       	st	Z, r24
	sei(); // Enable the Global Interrupt Enable flag so that interrupts can be processed
     144:	78 94       	sei
	mState=mIDLE;
     146:	10 92 a0 01 	sts	0x01A0, r1
	uState=uIDLE;
     14a:	10 92 9f 01 	sts	0x019F, r1
volatile int uCheckSum=0;
volatile int deviceIdx=0;

int main(void)
{
	char synclk=0;
     14e:	ff 24       	eor	r15, r15
		case mFREQ:
			dds1.profile0(deviceIdx,'f',(unsigned char*)freq);
			mState=mIDLE;
			break;
		case mAMP:
			dds1.profile0(deviceIdx,'a',(unsigned char*)amp);
     150:	0f 2e       	mov	r0, r31
     152:	f0 e8       	ldi	r31, 0x80	; 128
     154:	af 2e       	mov	r10, r31
     156:	f1 e0       	ldi	r31, 0x01	; 1
     158:	bf 2e       	mov	r11, r31
     15a:	f0 2d       	mov	r31, r0
		case mWRTREG:
			dds1.regwrite(deviceIdx,(unsigned char*)address,dataLen,(unsigned char*)data);
			mState=mIDLE;
			break;
		case mFREQ:
			dds1.profile0(deviceIdx,'f',(unsigned char*)freq);
     15c:	0f 2e       	mov	r0, r31
     15e:	f4 e8       	ldi	r31, 0x84	; 132
     160:	8f 2e       	mov	r8, r31
     162:	f1 e0       	ldi	r31, 0x01	; 1
     164:	9f 2e       	mov	r9, r31
     166:	f0 2d       	mov	r31, r0
		case mAMP:
			dds1.profile0(deviceIdx,'a',(unsigned char*)amp);
			mState=mIDLE;
			break;
		case mPHASE:
			dds1.profile0(deviceIdx,'p',(unsigned char*)phase);
     168:	0f 2e       	mov	r0, r31
     16a:	fc e7       	ldi	r31, 0x7C	; 124
     16c:	6f 2e       	mov	r6, r31
     16e:	f1 e0       	ldi	r31, 0x01	; 1
     170:	7f 2e       	mov	r7, r31
     172:	f0 2d       	mov	r31, r0
			dds1.synclk(deviceIdx,synclk);
			synclk = ~synclk;
			mState=mIDLE;
			break;
		case mRESET:
			USART_Send_ConstString("Master Reset\n");
     174:	0f 2e       	mov	r0, r31
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	4f 2e       	mov	r4, r31
     17a:	f1 e0       	ldi	r31, 0x01	; 1
     17c:	5f 2e       	mov	r5, r31
     17e:	f0 2d       	mov	r31, r0
			_SFR_IO8(MR_PORT) &= (uint8_t)(0 << MR_PORTn); // MR Low
			_delay_ms(1);
			mState=mIDLE;
			break;
		case mWRTREG:
			dds1.regwrite(deviceIdx,(unsigned char*)address,dataLen,(unsigned char*)data);
     180:	0f 2e       	mov	r0, r31
     182:	fd e9       	ldi	r31, 0x9D	; 157
     184:	2f 2e       	mov	r2, r31
     186:	f1 e0       	ldi	r31, 0x01	; 1
     188:	3f 2e       	mov	r3, r31
     18a:	f0 2d       	mov	r31, r0
     18c:	0f 2e       	mov	r0, r31
     18e:	fc e8       	ldi	r31, 0x8C	; 140
     190:	cf 2e       	mov	r12, r31
     192:	f1 e0       	ldi	r31, 0x01	; 1
     194:	df 2e       	mov	r13, r31
     196:	f0 2d       	mov	r31, r0
     198:	8f e9       	ldi	r24, 0x9F	; 159
     19a:	9f e0       	ldi	r25, 0x0F	; 15
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <main+0xf6>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0xfc>
     1a2:	00 00       	nop
	mState=mIDLE;
	uState=uIDLE;
	while(1)
	{
		_delay_ms(1);
		switch(mState)
     1a4:	80 91 a0 01 	lds	r24, 0x01A0
     1a8:	81 31       	cpi	r24, 0x11	; 17
     1aa:	b1 f1       	breq	.+108    	; 0x218 <main+0x172>
     1ac:	82 31       	cpi	r24, 0x12	; 18
     1ae:	40 f4       	brcc	.+16     	; 0x1c0 <main+0x11a>
     1b0:	81 30       	cpi	r24, 0x01	; 1
     1b2:	79 f0       	breq	.+30     	; 0x1d2 <main+0x12c>
     1b4:	81 30       	cpi	r24, 0x01	; 1
     1b6:	80 f3       	brcs	.-32     	; 0x198 <main+0xf2>
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	09 f0       	breq	.+2      	; 0x1be <main+0x118>
     1bc:	64 c0       	rjmp	.+200    	; 0x286 <main+0x1e0>
     1be:	17 c0       	rjmp	.+46     	; 0x1ee <main+0x148>
     1c0:	83 31       	cpi	r24, 0x13	; 19
     1c2:	09 f4       	brne	.+2      	; 0x1c6 <main+0x120>
     1c4:	46 c0       	rjmp	.+140    	; 0x252 <main+0x1ac>
     1c6:	83 31       	cpi	r24, 0x13	; 19
     1c8:	b8 f1       	brcs	.+110    	; 0x238 <main+0x192>
     1ca:	84 31       	cpi	r24, 0x14	; 20
     1cc:	09 f0       	breq	.+2      	; 0x1d0 <main+0x12a>
     1ce:	5b c0       	rjmp	.+182    	; 0x286 <main+0x1e0>
     1d0:	4d c0       	rjmp	.+154    	; 0x26c <main+0x1c6>
		{
		case mIDLE:
			break;
		case mTEST:
			dds1.synclk(deviceIdx,synclk);
     1d2:	60 91 70 01 	lds	r22, 0x0170
     1d6:	70 91 71 01 	lds	r23, 0x0171
     1da:	ce 01       	movw	r24, r28
     1dc:	01 96       	adiw	r24, 0x01	; 1
     1de:	4f 2d       	mov	r20, r15
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN3DDS6synclkEii>
			synclk = ~synclk;
     1e6:	f0 94       	com	r15
			mState=mIDLE;
     1e8:	10 92 a0 01 	sts	0x01A0, r1
			break;
     1ec:	d5 cf       	rjmp	.-86     	; 0x198 <main+0xf2>
		case mRESET:
			USART_Send_ConstString("Master Reset\n");
     1ee:	c2 01       	movw	r24, r4
     1f0:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z22USART_Send_ConstStringPKc>
			_SFR_IO8(MR_PORT) |= (uint8_t)(1 << MR_PORTn); // MR High
     1f4:	29 9a       	sbi	0x05, 1	; 5
     1f6:	8f e9       	ldi	r24, 0x9F	; 159
     1f8:	9f e0       	ldi	r25, 0x0F	; 15
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0x154>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x15a>
     200:	00 00       	nop
			_delay_ms(1);
			_SFR_IO8(MR_PORT) &= (uint8_t)(0 << MR_PORTn); // MR Low
     202:	85 b1       	in	r24, 0x05	; 5
     204:	15 b8       	out	0x05, r1	; 5
     206:	8f e9       	ldi	r24, 0x9F	; 159
     208:	9f e0       	ldi	r25, 0x0F	; 15
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <main+0x164>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x16a>
     210:	00 00       	nop
			_delay_ms(1);
			mState=mIDLE;
     212:	10 92 a0 01 	sts	0x01A0, r1
			break;
     216:	c0 cf       	rjmp	.-128    	; 0x198 <main+0xf2>
		case mWRTREG:
			dds1.regwrite(deviceIdx,(unsigned char*)address,dataLen,(unsigned char*)data);
     218:	60 91 70 01 	lds	r22, 0x0170
     21c:	70 91 71 01 	lds	r23, 0x0171
     220:	20 91 9c 01 	lds	r18, 0x019C
     224:	ce 01       	movw	r24, r28
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	a1 01       	movw	r20, r2
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	86 01       	movw	r16, r12
     22e:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN3DDS8regwriteEiPhiS0_>
			mState=mIDLE;
     232:	10 92 a0 01 	sts	0x01A0, r1
			break;
     236:	b0 cf       	rjmp	.-160    	; 0x198 <main+0xf2>
		case mFREQ:
			dds1.profile0(deviceIdx,'f',(unsigned char*)freq);
     238:	60 91 70 01 	lds	r22, 0x0170
     23c:	70 91 71 01 	lds	r23, 0x0171
     240:	ce 01       	movw	r24, r28
     242:	01 96       	adiw	r24, 0x01	; 1
     244:	46 e6       	ldi	r20, 0x66	; 102
     246:	94 01       	movw	r18, r8
     248:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN3DDS8profile0EicPh>
			mState=mIDLE;
     24c:	10 92 a0 01 	sts	0x01A0, r1
			break;
     250:	a3 cf       	rjmp	.-186    	; 0x198 <main+0xf2>
		case mAMP:
			dds1.profile0(deviceIdx,'a',(unsigned char*)amp);
     252:	60 91 70 01 	lds	r22, 0x0170
     256:	70 91 71 01 	lds	r23, 0x0171
     25a:	ce 01       	movw	r24, r28
     25c:	01 96       	adiw	r24, 0x01	; 1
     25e:	41 e6       	ldi	r20, 0x61	; 97
     260:	95 01       	movw	r18, r10
     262:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN3DDS8profile0EicPh>
			mState=mIDLE;
     266:	10 92 a0 01 	sts	0x01A0, r1
			break;
     26a:	96 cf       	rjmp	.-212    	; 0x198 <main+0xf2>
		case mPHASE:
			dds1.profile0(deviceIdx,'p',(unsigned char*)phase);
     26c:	60 91 70 01 	lds	r22, 0x0170
     270:	70 91 71 01 	lds	r23, 0x0171
     274:	ce 01       	movw	r24, r28
     276:	01 96       	adiw	r24, 0x01	; 1
     278:	40 e7       	ldi	r20, 0x70	; 112
     27a:	93 01       	movw	r18, r6
     27c:	0e 94 ab 04 	call	0x956	; 0x956 <_ZN3DDS8profile0EicPh>
			mState=mIDLE;
     280:	10 92 a0 01 	sts	0x01A0, r1
			break;
     284:	89 cf       	rjmp	.-238    	; 0x198 <main+0xf2>
		default:
			mState=mIDLE;
     286:	10 92 a0 01 	sts	0x01A0, r1
			break;
     28a:	86 cf       	rjmp	.-244    	; 0x198 <main+0xf2>

0000028c <__vector_18>:
// R: Register
// T: Test
// X: Master Reset

ISR(USART_RX_vect)
{
     28c:	1f 92       	push	r1
     28e:	0f 92       	push	r0
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	0f 92       	push	r0
     294:	11 24       	eor	r1, r1
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	2f 93       	push	r18
     29c:	3f 93       	push	r19
     29e:	4f 93       	push	r20
     2a0:	5f 93       	push	r21
     2a2:	6f 93       	push	r22
     2a4:	7f 93       	push	r23
     2a6:	8f 93       	push	r24
     2a8:	9f 93       	push	r25
     2aa:	af 93       	push	r26
     2ac:	bf 93       	push	r27
     2ae:	ef 93       	push	r30
     2b0:	ff 93       	push	r31
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	e3 97       	sbiw	r28, 0x33	; 51
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	cd bf       	out	0x3d, r28	; 61
	char rxByte=UDR0;
     2c0:	80 91 c6 00 	lds	r24, 0x00C6
     2c4:	89 83       	std	Y+1, r24	; 0x01
	char printout[50];
	if(mState==mIDLE)
     2c6:	90 91 a0 01 	lds	r25, 0x01A0
     2ca:	99 23       	and	r25, r25
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <__vector_18+0x44>
     2ce:	fc c1       	rjmp	.+1016   	; 0x6c8 <__vector_18+0x43c>
	{
		if(rxByte=='/') {uState=uIDLE;}
     2d0:	8f 32       	cpi	r24, 0x2F	; 47
     2d2:	11 f4       	brne	.+4      	; 0x2d8 <__vector_18+0x4c>
     2d4:	10 92 9f 01 	sts	0x019F, r1
		switch(uState)
     2d8:	90 91 9f 01 	lds	r25, 0x019F
     2dc:	92 31       	cpi	r25, 0x12	; 18
     2de:	09 f4       	brne	.+2      	; 0x2e2 <__vector_18+0x56>
     2e0:	ad c0       	rjmp	.+346    	; 0x43c <__vector_18+0x1b0>
     2e2:	93 31       	cpi	r25, 0x13	; 19
     2e4:	40 f4       	brcc	.+16     	; 0x2f6 <__vector_18+0x6a>
     2e6:	93 30       	cpi	r25, 0x03	; 3
     2e8:	51 f1       	breq	.+84     	; 0x33e <__vector_18+0xb2>
     2ea:	91 31       	cpi	r25, 0x11	; 17
     2ec:	09 f4       	brne	.+2      	; 0x2f0 <__vector_18+0x64>
     2ee:	7a c0       	rjmp	.+244    	; 0x3e4 <__vector_18+0x158>
     2f0:	99 23       	and	r25, r25
     2f2:	71 f0       	breq	.+28     	; 0x310 <__vector_18+0x84>
     2f4:	8d c1       	rjmp	.+794    	; 0x610 <__vector_18+0x384>
     2f6:	94 31       	cpi	r25, 0x14	; 20
     2f8:	09 f4       	brne	.+2      	; 0x2fc <__vector_18+0x70>
     2fa:	00 c1       	rjmp	.+512    	; 0x4fc <__vector_18+0x270>
     2fc:	94 31       	cpi	r25, 0x14	; 20
     2fe:	08 f4       	brcc	.+2      	; 0x302 <__vector_18+0x76>
     300:	c5 c0       	rjmp	.+394    	; 0x48c <__vector_18+0x200>
     302:	95 31       	cpi	r25, 0x15	; 21
     304:	09 f4       	brne	.+2      	; 0x308 <__vector_18+0x7c>
     306:	28 c1       	rjmp	.+592    	; 0x558 <__vector_18+0x2cc>
     308:	96 31       	cpi	r25, 0x16	; 22
     30a:	09 f0       	breq	.+2      	; 0x30e <__vector_18+0x82>
     30c:	81 c1       	rjmp	.+770    	; 0x610 <__vector_18+0x384>
     30e:	52 c1       	rjmp	.+676    	; 0x5b4 <__vector_18+0x328>
		{
		case uIDLE: // Home
			if(rxByte=='I')
     310:	89 34       	cpi	r24, 0x49	; 73
     312:	41 f4       	brne	.+16     	; 0x324 <__vector_18+0x98>
			{
				uState=uINDEX;
     314:	83 e0       	ldi	r24, 0x03	; 3
     316:	80 93 9f 01 	sts	0x019F, r24
				uCheckSum=0;
     31a:	10 92 73 01 	sts	0x0173, r1
     31e:	10 92 72 01 	sts	0x0172, r1
     322:	d2 c1       	rjmp	.+932    	; 0x6c8 <__vector_18+0x43c>
			}
			else if(rxByte=='X')
     324:	88 35       	cpi	r24, 0x58	; 88
     326:	09 f0       	breq	.+2      	; 0x32a <__vector_18+0x9e>
     328:	cf c1       	rjmp	.+926    	; 0x6c8 <__vector_18+0x43c>
			{
				mState=mRESET;
     32a:	82 e0       	ldi	r24, 0x02	; 2
     32c:	80 93 a0 01 	sts	0x01A0, r24
				uState=uIDLE;
     330:	10 92 9f 01 	sts	0x019F, r1
				uCheckSum=0;
     334:	10 92 73 01 	sts	0x0173, r1
     338:	10 92 72 01 	sts	0x0172, r1
     33c:	c5 c1       	rjmp	.+906    	; 0x6c8 <__vector_18+0x43c>
			}
			break;
		case uINDEX:
			if ((uCheckSum==0)&&(rxByte>='0'&&rxByte<='7'))
     33e:	20 91 72 01 	lds	r18, 0x0172
     342:	30 91 73 01 	lds	r19, 0x0173
     346:	21 15       	cp	r18, r1
     348:	31 05       	cpc	r19, r1
     34a:	09 f0       	breq	.+2      	; 0x34e <__vector_18+0xc2>
     34c:	64 c1       	rjmp	.+712    	; 0x616 <__vector_18+0x38a>
     34e:	98 2f       	mov	r25, r24
     350:	90 53       	subi	r25, 0x30	; 48
     352:	98 30       	cpi	r25, 0x08	; 8
     354:	08 f0       	brcs	.+2      	; 0x358 <__vector_18+0xcc>
     356:	5f c1       	rjmp	.+702    	; 0x616 <__vector_18+0x38a>
			{
				deviceIdx=atoi(&rxByte);
     358:	ce 01       	movw	r24, r28
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	0e 94 1b 08 	call	0x1036	; 0x1036 <atoi>
     360:	90 93 71 01 	sts	0x0171, r25
     364:	80 93 70 01 	sts	0x0170, r24
				uCheckSum++;
     368:	80 91 72 01 	lds	r24, 0x0172
     36c:	90 91 73 01 	lds	r25, 0x0173
     370:	01 96       	adiw	r24, 0x01	; 1
     372:	90 93 73 01 	sts	0x0173, r25
     376:	80 93 72 01 	sts	0x0172, r24
     37a:	a6 c1       	rjmp	.+844    	; 0x6c8 <__vector_18+0x43c>
			}
			else if(uCheckSum==1)
			{
				if(rxByte=='T') // Test Mode (T)
     37c:	84 35       	cpi	r24, 0x54	; 84
     37e:	31 f4       	brne	.+12     	; 0x38c <__vector_18+0x100>
				{
					mState=mTEST;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	80 93 a0 01 	sts	0x01A0, r24
					uState=uIDLE;
     386:	10 92 9f 01 	sts	0x019F, r1
     38a:	9e c1       	rjmp	.+828    	; 0x6c8 <__vector_18+0x43c>
				}
				else if(rxByte=='R') // Register Mode (R)
     38c:	82 35       	cpi	r24, 0x52	; 82
     38e:	41 f4       	brne	.+16     	; 0x3a0 <__vector_18+0x114>
				{
					uState=uADDRESS;
     390:	81 e1       	ldi	r24, 0x11	; 17
     392:	80 93 9f 01 	sts	0x019F, r24
					uCheckSum=0;
     396:	10 92 73 01 	sts	0x0173, r1
     39a:	10 92 72 01 	sts	0x0172, r1
     39e:	94 c1       	rjmp	.+808    	; 0x6c8 <__vector_18+0x43c>
				}
				else if(rxByte=='F') // Frequency (F)
     3a0:	86 34       	cpi	r24, 0x46	; 70
     3a2:	41 f4       	brne	.+16     	; 0x3b4 <__vector_18+0x128>
				{
					uState=uFREQ;
     3a4:	84 e1       	ldi	r24, 0x14	; 20
     3a6:	80 93 9f 01 	sts	0x019F, r24
					uCheckSum=0;
     3aa:	10 92 73 01 	sts	0x0173, r1
     3ae:	10 92 72 01 	sts	0x0172, r1
     3b2:	8a c1       	rjmp	.+788    	; 0x6c8 <__vector_18+0x43c>
				}
				else if(rxByte=='M') // Amplitude (M)
     3b4:	8d 34       	cpi	r24, 0x4D	; 77
     3b6:	41 f4       	brne	.+16     	; 0x3c8 <__vector_18+0x13c>
				{
					uState=uAMP;
     3b8:	85 e1       	ldi	r24, 0x15	; 21
     3ba:	80 93 9f 01 	sts	0x019F, r24
					uCheckSum=0;
     3be:	10 92 73 01 	sts	0x0173, r1
     3c2:	10 92 72 01 	sts	0x0172, r1
     3c6:	80 c1       	rjmp	.+768    	; 0x6c8 <__vector_18+0x43c>
				}
				else if(rxByte=='P') // Phase (P)
     3c8:	80 35       	cpi	r24, 0x50	; 80
     3ca:	09 f0       	breq	.+2      	; 0x3ce <__vector_18+0x142>
     3cc:	7d c1       	rjmp	.+762    	; 0x6c8 <__vector_18+0x43c>
				{
					uState=uPHASE;
     3ce:	86 e1       	ldi	r24, 0x16	; 22
     3d0:	80 93 9f 01 	sts	0x019F, r24
					uCheckSum=0;
     3d4:	10 92 73 01 	sts	0x0173, r1
     3d8:	10 92 72 01 	sts	0x0172, r1
     3dc:	75 c1       	rjmp	.+746    	; 0x6c8 <__vector_18+0x43c>
				}
			}
			else
			{
				uState=uIDLE;
     3de:	10 92 9f 01 	sts	0x019F, r1
     3e2:	72 c1       	rjmp	.+740    	; 0x6c8 <__vector_18+0x43c>
			}
			break;
		case uADDRESS: // Register Mode > Address
			if ((uCheckSum<=1)&&((rxByte>='0'&&rxByte<='9')||(rxByte>='a'&&rxByte<='f')))
     3e4:	20 91 72 01 	lds	r18, 0x0172
     3e8:	30 91 73 01 	lds	r19, 0x0173
     3ec:	22 30       	cpi	r18, 0x02	; 2
     3ee:	31 05       	cpc	r19, r1
     3f0:	0c f0       	brlt	.+2      	; 0x3f4 <__vector_18+0x168>
     3f2:	1a c1       	rjmp	.+564    	; 0x628 <__vector_18+0x39c>
     3f4:	98 2f       	mov	r25, r24
     3f6:	90 53       	subi	r25, 0x30	; 48
     3f8:	9a 30       	cpi	r25, 0x0A	; 10
     3fa:	20 f0       	brcs	.+8      	; 0x404 <__vector_18+0x178>
     3fc:	91 53       	subi	r25, 0x31	; 49
     3fe:	96 30       	cpi	r25, 0x06	; 6
     400:	08 f0       	brcs	.+2      	; 0x404 <__vector_18+0x178>
     402:	12 c1       	rjmp	.+548    	; 0x628 <__vector_18+0x39c>
			{
				address[uCheckSum]=rxByte;
     404:	e0 91 72 01 	lds	r30, 0x0172
     408:	f0 91 73 01 	lds	r31, 0x0173
     40c:	e3 56       	subi	r30, 0x63	; 99
     40e:	fe 4f       	sbci	r31, 0xFE	; 254
     410:	80 83       	st	Z, r24
				uCheckSum++;
     412:	80 91 72 01 	lds	r24, 0x0172
     416:	90 91 73 01 	lds	r25, 0x0173
     41a:	01 96       	adiw	r24, 0x01	; 1
     41c:	90 93 73 01 	sts	0x0173, r25
     420:	80 93 72 01 	sts	0x0172, r24
     424:	51 c1       	rjmp	.+674    	; 0x6c8 <__vector_18+0x43c>
			}
			else if ((uCheckSum==2)&&(rxByte=='L'))
     426:	8c 34       	cpi	r24, 0x4C	; 76
     428:	09 f0       	breq	.+2      	; 0x42c <__vector_18+0x1a0>
     42a:	06 c1       	rjmp	.+524    	; 0x638 <__vector_18+0x3ac>
			{
				uState=uDATALEN;
     42c:	82 e1       	ldi	r24, 0x12	; 18
     42e:	80 93 9f 01 	sts	0x019F, r24
				uCheckSum=0;
     432:	10 92 73 01 	sts	0x0173, r1
     436:	10 92 72 01 	sts	0x0172, r1
     43a:	46 c1       	rjmp	.+652    	; 0x6c8 <__vector_18+0x43c>
			{
				uState=uIDLE;
			}					
			break;
		case uDATALEN: // Address > Data Length
			if ((uCheckSum==0)&&(rxByte>='1'&&rxByte<='9'))
     43c:	20 91 72 01 	lds	r18, 0x0172
     440:	30 91 73 01 	lds	r19, 0x0173
     444:	21 15       	cp	r18, r1
     446:	31 05       	cpc	r19, r1
     448:	09 f0       	breq	.+2      	; 0x44c <__vector_18+0x1c0>
     44a:	f9 c0       	rjmp	.+498    	; 0x63e <__vector_18+0x3b2>
     44c:	98 2f       	mov	r25, r24
     44e:	91 53       	subi	r25, 0x31	; 49
     450:	99 30       	cpi	r25, 0x09	; 9
     452:	08 f0       	brcs	.+2      	; 0x456 <__vector_18+0x1ca>
     454:	f4 c0       	rjmp	.+488    	; 0x63e <__vector_18+0x3b2>
			{
				dataLen=atoi(&rxByte);
     456:	ce 01       	movw	r24, r28
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	0e 94 1b 08 	call	0x1036	; 0x1036 <atoi>
     45e:	80 93 9c 01 	sts	0x019C, r24
				uCheckSum++;
     462:	80 91 72 01 	lds	r24, 0x0172
     466:	90 91 73 01 	lds	r25, 0x0173
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	90 93 73 01 	sts	0x0173, r25
     470:	80 93 72 01 	sts	0x0172, r24
     474:	29 c1       	rjmp	.+594    	; 0x6c8 <__vector_18+0x43c>
			}
			else if ((uCheckSum==1)&&(rxByte=='D'))
     476:	84 34       	cpi	r24, 0x44	; 68
     478:	09 f0       	breq	.+2      	; 0x47c <__vector_18+0x1f0>
     47a:	e9 c0       	rjmp	.+466    	; 0x64e <__vector_18+0x3c2>
			{
				uState=uDATA;
     47c:	83 e1       	ldi	r24, 0x13	; 19
     47e:	80 93 9f 01 	sts	0x019F, r24
				uCheckSum=0;
     482:	10 92 73 01 	sts	0x0173, r1
     486:	10 92 72 01 	sts	0x0172, r1
     48a:	1e c1       	rjmp	.+572    	; 0x6c8 <__vector_18+0x43c>
			{
				uState=uIDLE;			
			}
			break;
		case uDATA: // Data Length > Data
			if ((uCheckSum<(dataLen*2))&&((rxByte>='0'&&rxByte<='9')||(rxByte>='a'&&rxByte<='f')))
     48c:	40 91 9c 01 	lds	r20, 0x019C
     490:	20 91 72 01 	lds	r18, 0x0172
     494:	30 91 73 01 	lds	r19, 0x0173
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	44 0f       	add	r20, r20
     49c:	55 1f       	adc	r21, r21
     49e:	24 17       	cp	r18, r20
     4a0:	35 07       	cpc	r19, r21
     4a2:	0c f0       	brlt	.+2      	; 0x4a6 <__vector_18+0x21a>
     4a4:	d7 c0       	rjmp	.+430    	; 0x654 <__vector_18+0x3c8>
     4a6:	98 2f       	mov	r25, r24
     4a8:	90 53       	subi	r25, 0x30	; 48
     4aa:	9a 30       	cpi	r25, 0x0A	; 10
     4ac:	20 f0       	brcs	.+8      	; 0x4b6 <__vector_18+0x22a>
     4ae:	91 53       	subi	r25, 0x31	; 49
     4b0:	96 30       	cpi	r25, 0x06	; 6
     4b2:	08 f0       	brcs	.+2      	; 0x4b6 <__vector_18+0x22a>
     4b4:	cf c0       	rjmp	.+414    	; 0x654 <__vector_18+0x3c8>
			{
				data[uCheckSum]=rxByte;
     4b6:	e0 91 72 01 	lds	r30, 0x0172
     4ba:	f0 91 73 01 	lds	r31, 0x0173
     4be:	e4 57       	subi	r30, 0x74	; 116
     4c0:	fe 4f       	sbci	r31, 0xFE	; 254
     4c2:	80 83       	st	Z, r24
				uCheckSum++;
     4c4:	80 91 72 01 	lds	r24, 0x0172
     4c8:	90 91 73 01 	lds	r25, 0x0173
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	90 93 73 01 	sts	0x0173, r25
     4d2:	80 93 72 01 	sts	0x0172, r24
				if(uCheckSum==dataLen*2)
     4d6:	20 91 9c 01 	lds	r18, 0x019C
     4da:	80 91 72 01 	lds	r24, 0x0172
     4de:	90 91 73 01 	lds	r25, 0x0173
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	22 0f       	add	r18, r18
     4e6:	33 1f       	adc	r19, r19
     4e8:	28 17       	cp	r18, r24
     4ea:	39 07       	cpc	r19, r25
     4ec:	09 f0       	breq	.+2      	; 0x4f0 <__vector_18+0x264>
     4ee:	ec c0       	rjmp	.+472    	; 0x6c8 <__vector_18+0x43c>
				{
					mState=mWRTREG;
     4f0:	81 e1       	ldi	r24, 0x11	; 17
     4f2:	80 93 a0 01 	sts	0x01A0, r24
					uState=uIDLE;
     4f6:	10 92 9f 01 	sts	0x019F, r1
     4fa:	e6 c0       	rjmp	.+460    	; 0x6c8 <__vector_18+0x43c>
				USART_Send_String((unsigned char*)printout);
				uState=uIDLE;
			}
			break;
		case uFREQ: // Frequency
			if ((uCheckSum<8)&&((rxByte>='0'&&rxByte<='9')||(rxByte>='a'&&rxByte<='f')))
     4fc:	20 91 72 01 	lds	r18, 0x0172
     500:	30 91 73 01 	lds	r19, 0x0173
     504:	28 30       	cpi	r18, 0x08	; 8
     506:	31 05       	cpc	r19, r1
     508:	0c f0       	brlt	.+2      	; 0x50c <__vector_18+0x280>
     50a:	d6 c0       	rjmp	.+428    	; 0x6b8 <__vector_18+0x42c>
     50c:	98 2f       	mov	r25, r24
     50e:	90 53       	subi	r25, 0x30	; 48
     510:	9a 30       	cpi	r25, 0x0A	; 10
     512:	20 f0       	brcs	.+8      	; 0x51c <__vector_18+0x290>
     514:	91 53       	subi	r25, 0x31	; 49
     516:	96 30       	cpi	r25, 0x06	; 6
     518:	08 f0       	brcs	.+2      	; 0x51c <__vector_18+0x290>
     51a:	ce c0       	rjmp	.+412    	; 0x6b8 <__vector_18+0x42c>
			{
				freq[uCheckSum]=rxByte;		
     51c:	e0 91 72 01 	lds	r30, 0x0172
     520:	f0 91 73 01 	lds	r31, 0x0173
     524:	ec 57       	subi	r30, 0x7C	; 124
     526:	fe 4f       	sbci	r31, 0xFE	; 254
     528:	80 83       	st	Z, r24
				uCheckSum++;
     52a:	80 91 72 01 	lds	r24, 0x0172
     52e:	90 91 73 01 	lds	r25, 0x0173
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	90 93 73 01 	sts	0x0173, r25
     538:	80 93 72 01 	sts	0x0172, r24
				if(uCheckSum==8)
     53c:	80 91 72 01 	lds	r24, 0x0172
     540:	90 91 73 01 	lds	r25, 0x0173
     544:	88 30       	cpi	r24, 0x08	; 8
     546:	91 05       	cpc	r25, r1
     548:	09 f0       	breq	.+2      	; 0x54c <__vector_18+0x2c0>
     54a:	be c0       	rjmp	.+380    	; 0x6c8 <__vector_18+0x43c>
				{
					mState=mFREQ;
     54c:	82 e1       	ldi	r24, 0x12	; 18
     54e:	80 93 a0 01 	sts	0x01A0, r24
					uState=uIDLE;
     552:	10 92 9f 01 	sts	0x019F, r1
     556:	b8 c0       	rjmp	.+368    	; 0x6c8 <__vector_18+0x43c>
			{
				uState=uIDLE;
			}
			break;
		case uAMP: // Amplitude
			if ((uCheckSum<4)&&((rxByte>='0'&&rxByte<='9')||(rxByte>='a'&&rxByte<='f')))
     558:	20 91 72 01 	lds	r18, 0x0172
     55c:	30 91 73 01 	lds	r19, 0x0173
     560:	24 30       	cpi	r18, 0x04	; 4
     562:	31 05       	cpc	r19, r1
     564:	0c f0       	brlt	.+2      	; 0x568 <__vector_18+0x2dc>
     566:	ab c0       	rjmp	.+342    	; 0x6be <__vector_18+0x432>
     568:	98 2f       	mov	r25, r24
     56a:	90 53       	subi	r25, 0x30	; 48
     56c:	9a 30       	cpi	r25, 0x0A	; 10
     56e:	20 f0       	brcs	.+8      	; 0x578 <__vector_18+0x2ec>
     570:	91 53       	subi	r25, 0x31	; 49
     572:	96 30       	cpi	r25, 0x06	; 6
     574:	08 f0       	brcs	.+2      	; 0x578 <__vector_18+0x2ec>
     576:	a3 c0       	rjmp	.+326    	; 0x6be <__vector_18+0x432>
			{
				amp[uCheckSum]=rxByte;
     578:	e0 91 72 01 	lds	r30, 0x0172
     57c:	f0 91 73 01 	lds	r31, 0x0173
     580:	e0 58       	subi	r30, 0x80	; 128
     582:	fe 4f       	sbci	r31, 0xFE	; 254
     584:	80 83       	st	Z, r24
				uCheckSum++;
     586:	80 91 72 01 	lds	r24, 0x0172
     58a:	90 91 73 01 	lds	r25, 0x0173
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	90 93 73 01 	sts	0x0173, r25
     594:	80 93 72 01 	sts	0x0172, r24
				if(uCheckSum==4)
     598:	80 91 72 01 	lds	r24, 0x0172
     59c:	90 91 73 01 	lds	r25, 0x0173
     5a0:	84 30       	cpi	r24, 0x04	; 4
     5a2:	91 05       	cpc	r25, r1
     5a4:	09 f0       	breq	.+2      	; 0x5a8 <__vector_18+0x31c>
     5a6:	90 c0       	rjmp	.+288    	; 0x6c8 <__vector_18+0x43c>
				{
					mState=mAMP;
     5a8:	83 e1       	ldi	r24, 0x13	; 19
     5aa:	80 93 a0 01 	sts	0x01A0, r24
					uState=uIDLE;
     5ae:	10 92 9f 01 	sts	0x019F, r1
     5b2:	8a c0       	rjmp	.+276    	; 0x6c8 <__vector_18+0x43c>
			{
				uState=uIDLE;
			}
			break;
		case uPHASE: // Phase
			if ((uCheckSum<4)&&((rxByte>='0'&&rxByte<='9')||(rxByte>='a'&&rxByte<='f')))
     5b4:	20 91 72 01 	lds	r18, 0x0172
     5b8:	30 91 73 01 	lds	r19, 0x0173
     5bc:	24 30       	cpi	r18, 0x04	; 4
     5be:	31 05       	cpc	r19, r1
     5c0:	0c f0       	brlt	.+2      	; 0x5c4 <__vector_18+0x338>
     5c2:	80 c0       	rjmp	.+256    	; 0x6c4 <__vector_18+0x438>
     5c4:	98 2f       	mov	r25, r24
     5c6:	90 53       	subi	r25, 0x30	; 48
     5c8:	9a 30       	cpi	r25, 0x0A	; 10
     5ca:	20 f0       	brcs	.+8      	; 0x5d4 <__vector_18+0x348>
     5cc:	91 53       	subi	r25, 0x31	; 49
     5ce:	96 30       	cpi	r25, 0x06	; 6
     5d0:	08 f0       	brcs	.+2      	; 0x5d4 <__vector_18+0x348>
     5d2:	78 c0       	rjmp	.+240    	; 0x6c4 <__vector_18+0x438>
			{
				phase[uCheckSum]=rxByte;
     5d4:	e0 91 72 01 	lds	r30, 0x0172
     5d8:	f0 91 73 01 	lds	r31, 0x0173
     5dc:	e4 58       	subi	r30, 0x84	; 132
     5de:	fe 4f       	sbci	r31, 0xFE	; 254
     5e0:	80 83       	st	Z, r24
				uCheckSum++;
     5e2:	80 91 72 01 	lds	r24, 0x0172
     5e6:	90 91 73 01 	lds	r25, 0x0173
     5ea:	01 96       	adiw	r24, 0x01	; 1
     5ec:	90 93 73 01 	sts	0x0173, r25
     5f0:	80 93 72 01 	sts	0x0172, r24
				if(uCheckSum==4)
     5f4:	80 91 72 01 	lds	r24, 0x0172
     5f8:	90 91 73 01 	lds	r25, 0x0173
     5fc:	84 30       	cpi	r24, 0x04	; 4
     5fe:	91 05       	cpc	r25, r1
     600:	09 f0       	breq	.+2      	; 0x604 <__vector_18+0x378>
     602:	62 c0       	rjmp	.+196    	; 0x6c8 <__vector_18+0x43c>
				{
					mState=mPHASE;
     604:	84 e1       	ldi	r24, 0x14	; 20
     606:	80 93 a0 01 	sts	0x01A0, r24
					uState=uIDLE;
     60a:	10 92 9f 01 	sts	0x019F, r1
     60e:	5c c0       	rjmp	.+184    	; 0x6c8 <__vector_18+0x43c>
			{
				uState=uIDLE;
			}
			break;
		default:
			uState=uIDLE;
     610:	10 92 9f 01 	sts	0x019F, r1
     614:	59 c0       	rjmp	.+178    	; 0x6c8 <__vector_18+0x43c>
			if ((uCheckSum==0)&&(rxByte>='0'&&rxByte<='7'))
			{
				deviceIdx=atoi(&rxByte);
				uCheckSum++;
			}
			else if(uCheckSum==1)
     616:	20 91 72 01 	lds	r18, 0x0172
     61a:	30 91 73 01 	lds	r19, 0x0173
     61e:	21 30       	cpi	r18, 0x01	; 1
     620:	31 05       	cpc	r19, r1
     622:	09 f0       	breq	.+2      	; 0x626 <__vector_18+0x39a>
     624:	dc ce       	rjmp	.-584    	; 0x3de <__vector_18+0x152>
     626:	aa ce       	rjmp	.-684    	; 0x37c <__vector_18+0xf0>
			if ((uCheckSum<=1)&&((rxByte>='0'&&rxByte<='9')||(rxByte>='a'&&rxByte<='f')))
			{
				address[uCheckSum]=rxByte;
				uCheckSum++;
			}
			else if ((uCheckSum==2)&&(rxByte=='L'))
     628:	20 91 72 01 	lds	r18, 0x0172
     62c:	30 91 73 01 	lds	r19, 0x0173
     630:	22 30       	cpi	r18, 0x02	; 2
     632:	31 05       	cpc	r19, r1
     634:	09 f4       	brne	.+2      	; 0x638 <__vector_18+0x3ac>
     636:	f7 ce       	rjmp	.-530    	; 0x426 <__vector_18+0x19a>
				uState=uDATALEN;
				uCheckSum=0;
			}
			else
			{
				uState=uIDLE;
     638:	10 92 9f 01 	sts	0x019F, r1
     63c:	45 c0       	rjmp	.+138    	; 0x6c8 <__vector_18+0x43c>
			if ((uCheckSum==0)&&(rxByte>='1'&&rxByte<='9'))
			{
				dataLen=atoi(&rxByte);
				uCheckSum++;
			}
			else if ((uCheckSum==1)&&(rxByte=='D'))
     63e:	20 91 72 01 	lds	r18, 0x0172
     642:	30 91 73 01 	lds	r19, 0x0173
     646:	21 30       	cpi	r18, 0x01	; 1
     648:	31 05       	cpc	r19, r1
     64a:	09 f4       	brne	.+2      	; 0x64e <__vector_18+0x3c2>
     64c:	14 cf       	rjmp	.-472    	; 0x476 <__vector_18+0x1ea>
				uState=uDATA;
				uCheckSum=0;
			}
			else
			{
				uState=uIDLE;			
     64e:	10 92 9f 01 	sts	0x019F, r1
     652:	3a c0       	rjmp	.+116    	; 0x6c8 <__vector_18+0x43c>
					uState=uIDLE;
				}
			}
			else
			{
				sprintf(printout,"DataIdle=%d,%c\n",uCheckSum,rxByte);
     654:	40 91 72 01 	lds	r20, 0x0172
     658:	50 91 73 01 	lds	r21, 0x0173
     65c:	2d b7       	in	r18, 0x3d	; 61
     65e:	3e b7       	in	r19, 0x3e	; 62
     660:	28 50       	subi	r18, 0x08	; 8
     662:	30 40       	sbci	r19, 0x00	; 0
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	3e bf       	out	0x3e, r19	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	2d bf       	out	0x3d, r18	; 61
     66e:	ed b7       	in	r30, 0x3d	; 61
     670:	fe b7       	in	r31, 0x3e	; 62
     672:	31 96       	adiw	r30, 0x01	; 1
     674:	8e 01       	movw	r16, r28
     676:	0e 5f       	subi	r16, 0xFE	; 254
     678:	1f 4f       	sbci	r17, 0xFF	; 255
     67a:	ad b7       	in	r26, 0x3d	; 61
     67c:	be b7       	in	r27, 0x3e	; 62
     67e:	12 96       	adiw	r26, 0x02	; 2
     680:	1c 93       	st	X, r17
     682:	0e 93       	st	-X, r16
     684:	11 97       	sbiw	r26, 0x01	; 1
     686:	2e e0       	ldi	r18, 0x0E	; 14
     688:	31 e0       	ldi	r19, 0x01	; 1
     68a:	33 83       	std	Z+3, r19	; 0x03
     68c:	22 83       	std	Z+2, r18	; 0x02
     68e:	55 83       	std	Z+5, r21	; 0x05
     690:	44 83       	std	Z+4, r20	; 0x04
     692:	86 83       	std	Z+6, r24	; 0x06
     694:	17 82       	std	Z+7, r1	; 0x07
     696:	0e 94 41 08 	call	0x1082	; 0x1082 <sprintf>
				USART_Send_String((unsigned char*)printout);
     69a:	2d b7       	in	r18, 0x3d	; 61
     69c:	3e b7       	in	r19, 0x3e	; 62
     69e:	28 5f       	subi	r18, 0xF8	; 248
     6a0:	3f 4f       	sbci	r19, 0xFF	; 255
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	3e bf       	out	0x3e, r19	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	2d bf       	out	0x3d, r18	; 61
     6ac:	c8 01       	movw	r24, r16
     6ae:	0e 94 b8 07 	call	0xf70	; 0xf70 <_Z17USART_Send_StringPh>
				uState=uIDLE;
     6b2:	10 92 9f 01 	sts	0x019F, r1
     6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <__vector_18+0x43c>
					uState=uIDLE;
				}
			}
			else 
			{
				uState=uIDLE;
     6b8:	10 92 9f 01 	sts	0x019F, r1
     6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <__vector_18+0x43c>
					uState=uIDLE;
				}
			}
			else
			{
				uState=uIDLE;
     6be:	10 92 9f 01 	sts	0x019F, r1
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <__vector_18+0x43c>
					uState=uIDLE;
				}
			}
			else
			{
				uState=uIDLE;
     6c4:	10 92 9f 01 	sts	0x019F, r1
	}
	else
	{
		//USART_Send_Byte('X');
	}
     6c8:	e3 96       	adiw	r28, 0x33	; 51
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	ff 91       	pop	r31
     6d4:	ef 91       	pop	r30
     6d6:	bf 91       	pop	r27
     6d8:	af 91       	pop	r26
     6da:	9f 91       	pop	r25
     6dc:	8f 91       	pop	r24
     6de:	7f 91       	pop	r23
     6e0:	6f 91       	pop	r22
     6e2:	5f 91       	pop	r21
     6e4:	4f 91       	pop	r20
     6e6:	3f 91       	pop	r19
     6e8:	2f 91       	pop	r18
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	0f 90       	pop	r0
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	0f 90       	pop	r0
     6f4:	1f 90       	pop	r1
     6f6:	18 95       	reti

000006f8 <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_>:
#include "usart.h"
#include "dds.h"
#include <avr/io.h>

//DDS::DDS(const unsigned char *a,const int *b,const unsigned char *c,const int *d,unsigned char e,int f,unsigned char g,int h)
DDS::DDS(const unsigned char *a,const int *b,const unsigned char *c,const int *d,const unsigned char *e,const int *f,const unsigned char *g,const int *h)
     6f8:	2f 92       	push	r2
     6fa:	3f 92       	push	r3
     6fc:	4f 92       	push	r4
     6fe:	5f 92       	push	r5
     700:	6f 92       	push	r6
     702:	7f 92       	push	r7
     704:	8f 92       	push	r8
     706:	9f 92       	push	r9
     708:	af 92       	push	r10
     70a:	bf 92       	push	r11
     70c:	cf 92       	push	r12
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	3c 01       	movw	r6, r24
     722:	27 01       	movw	r4, r14
{
	CS_DDR=(unsigned char*)a;
     724:	dc 01       	movw	r26, r24
     726:	15 96       	adiw	r26, 0x05	; 5
     728:	7c 93       	st	X, r23
     72a:	6e 93       	st	-X, r22
     72c:	14 97       	sbiw	r26, 0x04	; 4
	CS_DDRn=(int*)b;
     72e:	11 96       	adiw	r26, 0x01	; 1
     730:	5c 93       	st	X, r21
     732:	4e 93       	st	-X, r20
	CS_PORT=(unsigned char*)c;
     734:	17 96       	adiw	r26, 0x07	; 7
     736:	3c 93       	st	X, r19
     738:	2e 93       	st	-X, r18
     73a:	16 97       	sbiw	r26, 0x06	; 6
	CS_PORTn=(int*)d;
     73c:	13 96       	adiw	r26, 0x03	; 3
     73e:	1c 93       	st	X, r17
     740:	0e 93       	st	-X, r16
     742:	12 97       	sbiw	r26, 0x02	; 2
	char idx=0;
	while (*(CS_DDR+idx))
     744:	cb 01       	movw	r24, r22
     746:	fb 01       	movw	r30, r22
     748:	20 81       	ld	r18, Z
     74a:	22 23       	and	r18, r18
     74c:	09 f4       	brne	.+2      	; 0x750 <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0x58>
     74e:	5e c0       	rjmp	.+188    	; 0x80c <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0x114>
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	50 e0       	ldi	r21, 0x00	; 0
{
	CS_DDR=(unsigned char*)a;
	CS_DDRn=(int*)b;
	CS_PORT=(unsigned char*)c;
	CS_PORTn=(int*)d;
	char idx=0;
     754:	30 e0       	ldi	r19, 0x00	; 0
	while (*(CS_DDR+idx))
	{
		DDS_ST0_AMP1[idx]=0x08;
     756:	ff 24       	eor	r15, r15
     758:	68 94       	set
     75a:	f3 f8       	bld	r15, 3
		DDS_ST0_AMP0[idx]=0xB5;
     75c:	0f 2e       	mov	r0, r31
     75e:	f5 eb       	ldi	r31, 0xB5	; 181
     760:	ef 2e       	mov	r14, r31
     762:	f0 2d       	mov	r31, r0
		DDS_ST0_PH0[idx]=0x00;
		DDS_ST0_FREQ3[idx]=0x00;
		DDS_ST0_FREQ2[idx]=0x00;
		DDS_ST0_FREQ1[idx]=0x00;
		DDS_ST0_FREQ0[idx]=0x00;
		_SFR_IO8(*(CS_DDR+idx)) |= (1 << *(CS_DDRn+idx)); // CS set direction
     764:	01 e0       	ldi	r16, 0x01	; 1
     766:	10 e0       	ldi	r17, 0x00	; 0
	CS_PORT=(unsigned char*)c;
	CS_PORTn=(int*)d;
	char idx=0;
	while (*(CS_DDR+idx))
	{
		DDS_ST0_AMP1[idx]=0x08;
     768:	f3 01       	movw	r30, r6
     76a:	e3 0f       	add	r30, r19
     76c:	f1 1d       	adc	r31, r1
     76e:	f4 8a       	std	Z+20, r15	; 0x14
		DDS_ST0_AMP0[idx]=0xB5;
     770:	e4 8e       	std	Z+28, r14	; 0x1c
		DDS_ST0_PH1[idx]=0x00;
     772:	14 a2       	lds	r17, 0x94
		DDS_ST0_PH0[idx]=0x00;
     774:	14 a6       	lds	r17, 0xb4
		DDS_ST0_FREQ3[idx]=0x00;
     776:	14 aa       	sts	0x94, r17
		DDS_ST0_FREQ2[idx]=0x00;
     778:	14 ae       	sts	0xb4, r17
		DDS_ST0_FREQ1[idx]=0x00;
     77a:	df 01       	movw	r26, r30
     77c:	ac 5b       	subi	r26, 0xBC	; 188
     77e:	bf 4f       	sbci	r27, 0xFF	; 255
     780:	1c 92       	st	X, r1
		DDS_ST0_FREQ0[idx]=0x00;
     782:	e4 5b       	subi	r30, 0xB4	; 180
     784:	ff 4f       	sbci	r31, 0xFF	; 255
     786:	10 82       	st	Z, r1
		_SFR_IO8(*(CS_DDR+idx)) |= (1 << *(CS_DDRn+idx)); // CS set direction
     788:	dc 01       	movw	r26, r24
     78a:	ec 91       	ld	r30, X
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	20 a1       	lds	r18, 0x40
     790:	ba 01       	movw	r22, r20
     792:	66 0f       	add	r22, r22
     794:	77 1f       	adc	r23, r23
     796:	d3 01       	movw	r26, r6
     798:	8d 91       	ld	r24, X+
     79a:	9c 91       	ld	r25, X
     79c:	86 0f       	add	r24, r22
     79e:	97 1f       	adc	r25, r23
     7a0:	18 01       	movw	r2, r16
     7a2:	dc 01       	movw	r26, r24
     7a4:	0c 90       	ld	r0, X
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0xb4>
     7a8:	22 0c       	add	r2, r2
     7aa:	33 1c       	adc	r3, r3
     7ac:	0a 94       	dec	r0
     7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0xb0>
     7b0:	c1 01       	movw	r24, r2
     7b2:	82 2b       	or	r24, r18
     7b4:	80 a3       	lds	r24, 0x50
		sbi(_SFR_IO8(*(CS_PORT+idx)),*(CS_PORTn+idx)); // CS high to disable SPI
     7b6:	d3 01       	movw	r26, r6
     7b8:	16 96       	adiw	r26, 0x06	; 6
     7ba:	ed 91       	ld	r30, X+
     7bc:	fc 91       	ld	r31, X
     7be:	17 97       	sbiw	r26, 0x07	; 7
     7c0:	e4 0f       	add	r30, r20
     7c2:	f5 1f       	adc	r31, r21
     7c4:	a0 81       	ld	r26, Z
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	90 96       	adiw	r26, 0x20	; 32
     7ca:	2c 91       	ld	r18, X
     7cc:	90 97       	sbiw	r26, 0x20	; 32
     7ce:	f3 01       	movw	r30, r6
     7d0:	82 81       	ldd	r24, Z+2	; 0x02
     7d2:	93 81       	ldd	r25, Z+3	; 0x03
     7d4:	fc 01       	movw	r30, r24
     7d6:	e6 0f       	add	r30, r22
     7d8:	f7 1f       	adc	r31, r23
     7da:	c8 01       	movw	r24, r16
     7dc:	00 80       	ld	r0, Z
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0xec>
     7e0:	88 0f       	add	r24, r24
     7e2:	99 1f       	adc	r25, r25
     7e4:	0a 94       	dec	r0
     7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0xe8>
     7e8:	82 2b       	or	r24, r18
     7ea:	90 96       	adiw	r26, 0x20	; 32
     7ec:	8c 93       	st	X, r24
		idx++;
     7ee:	3f 5f       	subi	r19, 0xFF	; 255
	CS_DDR=(unsigned char*)a;
	CS_DDRn=(int*)b;
	CS_PORT=(unsigned char*)c;
	CS_PORTn=(int*)d;
	char idx=0;
	while (*(CS_DDR+idx))
     7f0:	43 2f       	mov	r20, r19
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	d3 01       	movw	r26, r6
     7f6:	14 96       	adiw	r26, 0x04	; 4
     7f8:	8d 91       	ld	r24, X+
     7fa:	9c 91       	ld	r25, X
     7fc:	15 97       	sbiw	r26, 0x05	; 5
     7fe:	84 0f       	add	r24, r20
     800:	95 1f       	adc	r25, r21
     802:	fc 01       	movw	r30, r24
     804:	20 81       	ld	r18, Z
     806:	22 23       	and	r18, r18
     808:	09 f0       	breq	.+2      	; 0x80c <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0x114>
     80a:	ae cf       	rjmp	.-164    	; 0x768 <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0x70>
		DDS_ST0_FREQ0[idx]=0x00;
		_SFR_IO8(*(CS_DDR+idx)) |= (1 << *(CS_DDRn+idx)); // CS set direction
		sbi(_SFR_IO8(*(CS_PORT+idx)),*(CS_PORTn+idx)); // CS high to disable SPI
		idx++;
	}
	IOU_DDR=(unsigned char) *e;
     80c:	d2 01       	movw	r26, r4
     80e:	ec 91       	ld	r30, X
     810:	d3 01       	movw	r26, r6
     812:	1c 96       	adiw	r26, 0x0c	; 12
     814:	ec 93       	st	X, r30
	IOU_DDRn=(int) *f;
     816:	d6 01       	movw	r26, r12
     818:	9c 91       	ld	r25, X
     81a:	11 96       	adiw	r26, 0x01	; 1
     81c:	8c 91       	ld	r24, X
     81e:	d3 01       	movw	r26, r6
     820:	18 96       	adiw	r26, 0x08	; 8
     822:	9c 93       	st	X, r25
     824:	18 97       	sbiw	r26, 0x08	; 8
     826:	19 96       	adiw	r26, 0x09	; 9
     828:	8c 93       	st	X, r24
	IOU_PORT=(unsigned char) *g;
     82a:	d5 01       	movw	r26, r10
     82c:	8c 91       	ld	r24, X
     82e:	d3 01       	movw	r26, r6
     830:	1d 96       	adiw	r26, 0x0d	; 13
     832:	8c 93       	st	X, r24
	IOU_PORTn=(int) *h;
     834:	d4 01       	movw	r26, r8
     836:	2d 91       	ld	r18, X+
     838:	3c 91       	ld	r19, X
     83a:	d3 01       	movw	r26, r6
     83c:	1b 96       	adiw	r26, 0x0b	; 11
     83e:	3c 93       	st	X, r19
     840:	2e 93       	st	-X, r18
     842:	1a 97       	sbiw	r26, 0x0a	; 10
	_SFR_IO8(IOU_DDR) |= (1 << IOU_DDRn); // IOUpdate set direction
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	40 a1       	lds	r20, 0x40
     848:	21 e0       	ldi	r18, 0x01	; 1
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	19 01       	movw	r2, r18
     84e:	02 c0       	rjmp	.+4      	; 0x854 <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0x15c>
     850:	22 0c       	add	r2, r2
     852:	33 1c       	adc	r3, r3
     854:	9a 95       	dec	r25
     856:	e2 f7       	brpl	.-8      	; 0x850 <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0x158>
     858:	c1 01       	movw	r24, r2
     85a:	84 2b       	or	r24, r20
     85c:	80 a3       	lds	r24, 0x50
	cbi(_SFR_IO8(IOU_PORT),IOU_PORTn); // IOUpdate low to disable IOUpdate
     85e:	1d 96       	adiw	r26, 0x0d	; 13
     860:	ec 91       	ld	r30, X
     862:	1d 97       	sbiw	r26, 0x0d	; 13
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	40 a1       	lds	r20, 0x40
     868:	c9 01       	movw	r24, r18
     86a:	1a 96       	adiw	r26, 0x0a	; 10
     86c:	0c 90       	ld	r0, X
     86e:	02 c0       	rjmp	.+4      	; 0x874 <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0x17c>
     870:	88 0f       	add	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	0a 94       	dec	r0
     876:	e2 f7       	brpl	.-8      	; 0x870 <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0x178>
     878:	80 95       	com	r24
     87a:	48 23       	and	r20, r24
     87c:	40 a3       	lds	r20, 0x50
	IOR_DDR=(unsigned char) *(e+1);
     87e:	d2 01       	movw	r26, r4
     880:	11 96       	adiw	r26, 0x01	; 1
     882:	ec 91       	ld	r30, X
     884:	d3 01       	movw	r26, r6
     886:	52 96       	adiw	r26, 0x12	; 18
     888:	ec 93       	st	X, r30
	IOR_DDRn=(int) *(f+1);
     88a:	d6 01       	movw	r26, r12
     88c:	12 96       	adiw	r26, 0x02	; 2
     88e:	9c 91       	ld	r25, X
     890:	12 97       	sbiw	r26, 0x02	; 2
     892:	13 96       	adiw	r26, 0x03	; 3
     894:	8c 91       	ld	r24, X
     896:	d3 01       	movw	r26, r6
     898:	1e 96       	adiw	r26, 0x0e	; 14
     89a:	9c 93       	st	X, r25
     89c:	1e 97       	sbiw	r26, 0x0e	; 14
     89e:	1f 96       	adiw	r26, 0x0f	; 15
     8a0:	8c 93       	st	X, r24
	IOR_PORT=(unsigned char) *(g+1);
     8a2:	d5 01       	movw	r26, r10
     8a4:	11 96       	adiw	r26, 0x01	; 1
     8a6:	8c 91       	ld	r24, X
     8a8:	d3 01       	movw	r26, r6
     8aa:	53 96       	adiw	r26, 0x13	; 19
     8ac:	8c 93       	st	X, r24
	IOR_PORTn=(int) *(h+1);
     8ae:	d4 01       	movw	r26, r8
     8b0:	12 96       	adiw	r26, 0x02	; 2
     8b2:	4d 91       	ld	r20, X+
     8b4:	5c 91       	ld	r21, X
     8b6:	13 97       	sbiw	r26, 0x03	; 3
     8b8:	d3 01       	movw	r26, r6
     8ba:	51 96       	adiw	r26, 0x11	; 17
     8bc:	5c 93       	st	X, r21
     8be:	4e 93       	st	-X, r20
     8c0:	50 97       	sbiw	r26, 0x10	; 16
	_SFR_IO8(IOR_DDR) |= (1 << IOR_DDRn); // IOReset set direction
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	40 a1       	lds	r20, 0x40
     8c6:	19 01       	movw	r2, r18
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0x1d6>
     8ca:	22 0c       	add	r2, r2
     8cc:	33 1c       	adc	r3, r3
     8ce:	9a 95       	dec	r25
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0x1d2>
     8d2:	c1 01       	movw	r24, r2
     8d4:	84 2b       	or	r24, r20
     8d6:	80 a3       	lds	r24, 0x50
	sbi(_SFR_IO8(IOR_PORT),IOR_PORTn); // IOReset high to enable IO reset
     8d8:	53 96       	adiw	r26, 0x13	; 19
     8da:	ec 91       	ld	r30, X
     8dc:	53 97       	sbiw	r26, 0x13	; 19
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	40 a1       	lds	r20, 0x40
     8e2:	c9 01       	movw	r24, r18
     8e4:	50 96       	adiw	r26, 0x10	; 16
     8e6:	0c 90       	ld	r0, X
     8e8:	50 97       	sbiw	r26, 0x10	; 16
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0x1f8>
     8ec:	88 0f       	add	r24, r24
     8ee:	99 1f       	adc	r25, r25
     8f0:	0a 94       	dec	r0
     8f2:	e2 f7       	brpl	.-8      	; 0x8ec <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0x1f4>
     8f4:	84 2b       	or	r24, r20
     8f6:	80 a3       	lds	r24, 0x50
     8f8:	89 ef       	ldi	r24, 0xF9	; 249
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <_ZN3DDSC1EPKhPKiS1_S3_S1_S3_S1_S3_+0x204>
     900:	00 c0       	rjmp	.+0      	; 0x902 <__stack+0x3>
     902:	00 00       	nop
	_delay_ms(1);
	cbi(_SFR_IO8(IOR_PORT),IOR_PORTn); // IOReset low to disable IO reset
     904:	53 96       	adiw	r26, 0x13	; 19
     906:	ec 91       	ld	r30, X
     908:	53 97       	sbiw	r26, 0x13	; 19
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 a1       	lds	r24, 0x40
     90e:	50 96       	adiw	r26, 0x10	; 16
     910:	0c 90       	ld	r0, X
     912:	50 97       	sbiw	r26, 0x10	; 16
     914:	02 c0       	rjmp	.+4      	; 0x91a <__stack+0x1b>
     916:	22 0f       	add	r18, r18
     918:	33 1f       	adc	r19, r19
     91a:	0a 94       	dec	r0
     91c:	e2 f7       	brpl	.-8      	; 0x916 <__stack+0x17>
     91e:	20 95       	com	r18
     920:	28 23       	and	r18, r24
     922:	20 a3       	lds	r18, 0x50
     924:	e9 ef       	ldi	r30, 0xF9	; 249
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	31 97       	sbiw	r30, 0x01	; 1
     92a:	f1 f7       	brne	.-4      	; 0x928 <__stack+0x29>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <__stack+0x2f>
     92e:	00 00       	nop
	_delay_ms(1);
}
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	df 90       	pop	r13
     93e:	cf 90       	pop	r12
     940:	bf 90       	pop	r11
     942:	af 90       	pop	r10
     944:	9f 90       	pop	r9
     946:	8f 90       	pop	r8
     948:	7f 90       	pop	r7
     94a:	6f 90       	pop	r6
     94c:	5f 90       	pop	r5
     94e:	4f 90       	pop	r4
     950:	3f 90       	pop	r3
     952:	2f 90       	pop	r2
     954:	08 95       	ret

00000956 <_ZN3DDS8profile0EicPh>:

void DDS::profile0(int idx,char mode,unsigned char *set)
{
     956:	af 92       	push	r10
     958:	bf 92       	push	r11
     95a:	cf 92       	push	r12
     95c:	df 92       	push	r13
     95e:	ef 92       	push	r14
     960:	ff 92       	push	r15
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	8c 01       	movw	r16, r24
     96c:	6b 01       	movw	r12, r22
     96e:	79 01       	movw	r14, r18
	if(mode=='f')
     970:	46 36       	cpi	r20, 0x66	; 102
     972:	29 f5       	brne	.+74     	; 0x9be <_ZN3DDS8profile0EicPh+0x68>
	{
		USART_Send_ConstString("Frequency Set\n");
     974:	86 e3       	ldi	r24, 0x36	; 54
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z22USART_Send_ConstStringPKc>
		DDS_ST0_FREQ3[idx]=CharHexByte2Int(set,0);
     97c:	c7 01       	movw	r24, r14
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	0e 94 de 07 	call	0xfbc	; 0xfbc <_Z15CharHexByte2IntPhi>
     986:	e8 01       	movw	r28, r16
     988:	cc 0d       	add	r28, r12
     98a:	dd 1d       	adc	r29, r13
     98c:	8c ab       	sts	0x5c, r24
		DDS_ST0_FREQ2[idx]=CharHexByte2Int(set,2);
     98e:	c7 01       	movw	r24, r14
     990:	62 e0       	ldi	r22, 0x02	; 2
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	0e 94 de 07 	call	0xfbc	; 0xfbc <_Z15CharHexByte2IntPhi>
     998:	8c af       	sts	0x7c, r24
		DDS_ST0_FREQ1[idx]=CharHexByte2Int(set,4);
     99a:	c7 01       	movw	r24, r14
     99c:	64 e0       	ldi	r22, 0x04	; 4
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	0e 94 de 07 	call	0xfbc	; 0xfbc <_Z15CharHexByte2IntPhi>
     9a4:	fe 01       	movw	r30, r28
     9a6:	ec 5b       	subi	r30, 0xBC	; 188
     9a8:	ff 4f       	sbci	r31, 0xFF	; 255
     9aa:	80 83       	st	Z, r24
		DDS_ST0_FREQ0[idx]=CharHexByte2Int(set,6);
     9ac:	c7 01       	movw	r24, r14
     9ae:	66 e0       	ldi	r22, 0x06	; 6
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	0e 94 de 07 	call	0xfbc	; 0xfbc <_Z15CharHexByte2IntPhi>
     9b6:	c4 5b       	subi	r28, 0xB4	; 180
     9b8:	df 4f       	sbci	r29, 0xFF	; 255
     9ba:	88 83       	st	Y, r24
     9bc:	2b c0       	rjmp	.+86     	; 0xa14 <_ZN3DDS8profile0EicPh+0xbe>
	}
	else if(mode=='a')
     9be:	41 36       	cpi	r20, 0x61	; 97
     9c0:	a1 f4       	brne	.+40     	; 0x9ea <_ZN3DDS8profile0EicPh+0x94>
	{
		USART_Send_ConstString("Amplitude Set\n");
     9c2:	85 e4       	ldi	r24, 0x45	; 69
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z22USART_Send_ConstStringPKc>
		DDS_ST0_AMP1[idx]=CharHexByte2Int(set,0);
     9ca:	c7 01       	movw	r24, r14
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	0e 94 de 07 	call	0xfbc	; 0xfbc <_Z15CharHexByte2IntPhi>
     9d4:	e8 01       	movw	r28, r16
     9d6:	cc 0d       	add	r28, r12
     9d8:	dd 1d       	adc	r29, r13
     9da:	8c 8b       	std	Y+20, r24	; 0x14
		DDS_ST0_AMP0[idx]=CharHexByte2Int(set,2);
     9dc:	c7 01       	movw	r24, r14
     9de:	62 e0       	ldi	r22, 0x02	; 2
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	0e 94 de 07 	call	0xfbc	; 0xfbc <_Z15CharHexByte2IntPhi>
     9e6:	8c 8f       	std	Y+28, r24	; 0x1c
     9e8:	15 c0       	rjmp	.+42     	; 0xa14 <_ZN3DDS8profile0EicPh+0xbe>
	}
	else if(mode=='p')
     9ea:	40 37       	cpi	r20, 0x70	; 112
     9ec:	99 f4       	brne	.+38     	; 0xa14 <_ZN3DDS8profile0EicPh+0xbe>
	{
		USART_Send_ConstString("Phase Set\n");
     9ee:	84 e5       	ldi	r24, 0x54	; 84
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z22USART_Send_ConstStringPKc>
		DDS_ST0_PH1[idx]=CharHexByte2Int(set,0);
     9f6:	c7 01       	movw	r24, r14
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	0e 94 de 07 	call	0xfbc	; 0xfbc <_Z15CharHexByte2IntPhi>
     a00:	e8 01       	movw	r28, r16
     a02:	cc 0d       	add	r28, r12
     a04:	dd 1d       	adc	r29, r13
     a06:	8c a3       	lds	r24, 0x5c
		DDS_ST0_PH0[idx]=CharHexByte2Int(set,2);
     a08:	c7 01       	movw	r24, r14
     a0a:	62 e0       	ldi	r22, 0x02	; 2
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	0e 94 de 07 	call	0xfbc	; 0xfbc <_Z15CharHexByte2IntPhi>
     a12:	8c a7       	lds	r24, 0x7c
	}
	sbi(_SFR_IO8(IOR_PORT),IOR_PORTn); // IOReset high to enable IO reset
     a14:	d8 01       	movw	r26, r16
     a16:	53 96       	adiw	r26, 0x13	; 19
     a18:	ec 91       	ld	r30, X
     a1a:	53 97       	sbiw	r26, 0x13	; 19
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	20 a1       	lds	r18, 0x40
     a20:	ee 24       	eor	r14, r14
     a22:	ff 24       	eor	r15, r15
     a24:	e3 94       	inc	r14
     a26:	c7 01       	movw	r24, r14
     a28:	50 96       	adiw	r26, 0x10	; 16
     a2a:	0c 90       	ld	r0, X
     a2c:	50 97       	sbiw	r26, 0x10	; 16
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <_ZN3DDS8profile0EicPh+0xde>
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	0a 94       	dec	r0
     a36:	e2 f7       	brpl	.-8      	; 0xa30 <_ZN3DDS8profile0EicPh+0xda>
     a38:	82 2b       	or	r24, r18
     a3a:	80 a3       	lds	r24, 0x50
     a3c:	e9 ef       	ldi	r30, 0xF9	; 249
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	31 97       	sbiw	r30, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <_ZN3DDS8profile0EicPh+0xea>
     a44:	00 c0       	rjmp	.+0      	; 0xa46 <_ZN3DDS8profile0EicPh+0xf0>
     a46:	00 00       	nop
	_delay_ms(1);
	cbi(_SFR_IO8(IOR_PORT),IOR_PORTn); // IOReset low to disable IO reset
     a48:	53 96       	adiw	r26, 0x13	; 19
     a4a:	ec 91       	ld	r30, X
     a4c:	53 97       	sbiw	r26, 0x13	; 19
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	20 a1       	lds	r18, 0x40
     a52:	c7 01       	movw	r24, r14
     a54:	50 96       	adiw	r26, 0x10	; 16
     a56:	0c 90       	ld	r0, X
     a58:	50 97       	sbiw	r26, 0x10	; 16
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <_ZN3DDS8profile0EicPh+0x10a>
     a5c:	88 0f       	add	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	0a 94       	dec	r0
     a62:	e2 f7       	brpl	.-8      	; 0xa5c <_ZN3DDS8profile0EicPh+0x106>
     a64:	80 95       	com	r24
     a66:	82 23       	and	r24, r18
     a68:	80 a3       	lds	r24, 0x50
     a6a:	e9 ef       	ldi	r30, 0xF9	; 249
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	31 97       	sbiw	r30, 0x01	; 1
     a70:	f1 f7       	brne	.-4      	; 0xa6e <_ZN3DDS8profile0EicPh+0x118>
     a72:	00 c0       	rjmp	.+0      	; 0xa74 <_ZN3DDS8profile0EicPh+0x11e>
     a74:	00 00       	nop
	_delay_ms(1);
	cbi(_SFR_IO8(*(CS_PORT+idx)),*(CS_PORTn+idx)); // CS Low to enable SPI
     a76:	16 96       	adiw	r26, 0x06	; 6
     a78:	ed 91       	ld	r30, X+
     a7a:	fc 91       	ld	r31, X
     a7c:	17 97       	sbiw	r26, 0x07	; 7
     a7e:	ec 0d       	add	r30, r12
     a80:	fd 1d       	adc	r31, r13
     a82:	e0 81       	ld	r30, Z
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	20 a1       	lds	r18, 0x40
     a88:	56 01       	movw	r10, r12
     a8a:	aa 0c       	add	r10, r10
     a8c:	bb 1c       	adc	r11, r11
     a8e:	12 96       	adiw	r26, 0x02	; 2
     a90:	8d 91       	ld	r24, X+
     a92:	9c 91       	ld	r25, X
     a94:	13 97       	sbiw	r26, 0x03	; 3
     a96:	8a 0d       	add	r24, r10
     a98:	9b 1d       	adc	r25, r11
     a9a:	a7 01       	movw	r20, r14
     a9c:	dc 01       	movw	r26, r24
     a9e:	0c 90       	ld	r0, X
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <_ZN3DDS8profile0EicPh+0x150>
     aa2:	44 0f       	add	r20, r20
     aa4:	55 1f       	adc	r21, r21
     aa6:	0a 94       	dec	r0
     aa8:	e2 f7       	brpl	.-8      	; 0xaa2 <_ZN3DDS8profile0EicPh+0x14c>
     aaa:	ca 01       	movw	r24, r20
     aac:	80 95       	com	r24
     aae:	28 23       	and	r18, r24
     ab0:	20 a3       	lds	r18, 0x50
     ab2:	89 ef       	ldi	r24, 0xF9	; 249
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <_ZN3DDS8profile0EicPh+0x160>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <_ZN3DDS8profile0EicPh+0x166>
     abc:	00 00       	nop
	_delay_ms(1);
	send_spi(DSS_ST0); // Address
     abe:	8e e0       	ldi	r24, 0x0E	; 14
     ac0:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
     ac4:	a9 ef       	ldi	r26, 0xF9	; 249
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	11 97       	sbiw	r26, 0x01	; 1
     aca:	f1 f7       	brne	.-4      	; 0xac8 <_ZN3DDS8profile0EicPh+0x172>
     acc:	00 c0       	rjmp	.+0      	; 0xace <_ZN3DDS8profile0EicPh+0x178>
     ace:	00 00       	nop
	_delay_ms(1);
	send_spi(DDS_ST0_AMP1[idx]);
     ad0:	e8 01       	movw	r28, r16
     ad2:	cc 0d       	add	r28, r12
     ad4:	dd 1d       	adc	r29, r13
     ad6:	8c 89       	ldd	r24, Y+20	; 0x14
     ad8:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
	send_spi(DDS_ST0_AMP0[idx]);
     adc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ade:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
	send_spi(DDS_ST0_PH1[idx]);
     ae2:	8c a1       	lds	r24, 0x4c
     ae4:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
	send_spi(DDS_ST0_PH0[idx]);
     ae8:	8c a5       	lds	r24, 0x6c
     aea:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
	send_spi(DDS_ST0_FREQ3[idx]);
     aee:	8c a9       	sts	0x4c, r24
     af0:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
	send_spi(DDS_ST0_FREQ2[idx]);
     af4:	8c ad       	sts	0x6c, r24
     af6:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
	send_spi(DDS_ST0_FREQ1[idx]);
     afa:	fe 01       	movw	r30, r28
     afc:	ec 5b       	subi	r30, 0xBC	; 188
     afe:	ff 4f       	sbci	r31, 0xFF	; 255
     b00:	80 81       	ld	r24, Z
     b02:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
	send_spi(DDS_ST0_FREQ0[idx]);
     b06:	c4 5b       	subi	r28, 0xB4	; 180
     b08:	df 4f       	sbci	r29, 0xFF	; 255
     b0a:	88 81       	ld	r24, Y
     b0c:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
     b10:	e9 ef       	ldi	r30, 0xF9	; 249
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	31 97       	sbiw	r30, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <_ZN3DDS8profile0EicPh+0x1be>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <_ZN3DDS8profile0EicPh+0x1c4>
     b1a:	00 00       	nop
	_delay_ms(1);
	sbi(_SFR_IO8(*(CS_PORT+idx)),*(CS_PORTn+idx)); // CS High to disable SPI
     b1c:	d8 01       	movw	r26, r16
     b1e:	16 96       	adiw	r26, 0x06	; 6
     b20:	8d 91       	ld	r24, X+
     b22:	9c 91       	ld	r25, X
     b24:	17 97       	sbiw	r26, 0x07	; 7
     b26:	8c 0d       	add	r24, r12
     b28:	9d 1d       	adc	r25, r13
     b2a:	dc 01       	movw	r26, r24
     b2c:	ec 91       	ld	r30, X
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	20 a1       	lds	r18, 0x40
     b32:	d8 01       	movw	r26, r16
     b34:	12 96       	adiw	r26, 0x02	; 2
     b36:	8d 91       	ld	r24, X+
     b38:	9c 91       	ld	r25, X
     b3a:	13 97       	sbiw	r26, 0x03	; 3
     b3c:	dc 01       	movw	r26, r24
     b3e:	aa 0d       	add	r26, r10
     b40:	bb 1d       	adc	r27, r11
     b42:	c7 01       	movw	r24, r14
     b44:	0c 90       	ld	r0, X
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <_ZN3DDS8profile0EicPh+0x1f6>
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	0a 94       	dec	r0
     b4e:	e2 f7       	brpl	.-8      	; 0xb48 <_ZN3DDS8profile0EicPh+0x1f2>
     b50:	82 2b       	or	r24, r18
     b52:	80 a3       	lds	r24, 0x50
     b54:	e9 ef       	ldi	r30, 0xF9	; 249
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <_ZN3DDS8profile0EicPh+0x202>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <_ZN3DDS8profile0EicPh+0x208>
     b5e:	00 00       	nop
	_delay_ms(1);
	sbi(_SFR_IO8(IOU_PORT),IOU_PORTn); // IOUpdate high to enable IO update
     b60:	d8 01       	movw	r26, r16
     b62:	1d 96       	adiw	r26, 0x0d	; 13
     b64:	ec 91       	ld	r30, X
     b66:	1d 97       	sbiw	r26, 0x0d	; 13
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	20 a1       	lds	r18, 0x40
     b6c:	c7 01       	movw	r24, r14
     b6e:	1a 96       	adiw	r26, 0x0a	; 10
     b70:	0c 90       	ld	r0, X
     b72:	1a 97       	sbiw	r26, 0x0a	; 10
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <_ZN3DDS8profile0EicPh+0x224>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	0a 94       	dec	r0
     b7c:	e2 f7       	brpl	.-8      	; 0xb76 <_ZN3DDS8profile0EicPh+0x220>
     b7e:	82 2b       	or	r24, r18
     b80:	80 a3       	lds	r24, 0x50
     b82:	e9 ef       	ldi	r30, 0xF9	; 249
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	31 97       	sbiw	r30, 0x01	; 1
     b88:	f1 f7       	brne	.-4      	; 0xb86 <_ZN3DDS8profile0EicPh+0x230>
     b8a:	00 c0       	rjmp	.+0      	; 0xb8c <_ZN3DDS8profile0EicPh+0x236>
     b8c:	00 00       	nop
	_delay_ms(1);
	cbi(_SFR_IO8(IOU_PORT),IOU_PORTn); // IOUpdate low to disable IO update
     b8e:	1d 96       	adiw	r26, 0x0d	; 13
     b90:	ec 91       	ld	r30, X
     b92:	1d 97       	sbiw	r26, 0x0d	; 13
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 a1       	lds	r24, 0x40
     b98:	1a 96       	adiw	r26, 0x0a	; 10
     b9a:	0c 90       	ld	r0, X
     b9c:	1a 97       	sbiw	r26, 0x0a	; 10
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <_ZN3DDS8profile0EicPh+0x24e>
     ba0:	ee 0c       	add	r14, r14
     ba2:	ff 1c       	adc	r15, r15
     ba4:	0a 94       	dec	r0
     ba6:	e2 f7       	brpl	.-8      	; 0xba0 <_ZN3DDS8profile0EicPh+0x24a>
     ba8:	e0 94       	com	r14
     baa:	e8 22       	and	r14, r24
     bac:	e0 a2       	lds	r30, 0x90
     bae:	e9 ef       	ldi	r30, 0xF9	; 249
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	31 97       	sbiw	r30, 0x01	; 1
     bb4:	f1 f7       	brne	.-4      	; 0xbb2 <_ZN3DDS8profile0EicPh+0x25c>
     bb6:	00 c0       	rjmp	.+0      	; 0xbb8 <_ZN3DDS8profile0EicPh+0x262>
     bb8:	00 00       	nop
	_delay_ms(1);
}
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	ff 90       	pop	r15
     bc4:	ef 90       	pop	r14
     bc6:	df 90       	pop	r13
     bc8:	cf 90       	pop	r12
     bca:	bf 90       	pop	r11
     bcc:	af 90       	pop	r10
     bce:	08 95       	ret

00000bd0 <_ZN3DDS6synclkEii>:

void DDS::synclk(int idx,int state)
{
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	ec 01       	movw	r28, r24
	cbi(_SFR_IO8(*(CS_PORT+idx)),*(CS_PORTn+idx)); // CS Low to enable SPI
     bde:	06 2f       	mov	r16, r22
     be0:	17 2f       	mov	r17, r23
     be2:	ee 81       	ldd	r30, Y+6	; 0x06
     be4:	ff 81       	ldd	r31, Y+7	; 0x07
     be6:	e0 0f       	add	r30, r16
     be8:	f1 1f       	adc	r31, r17
     bea:	a0 81       	ld	r26, Z
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	90 96       	adiw	r26, 0x20	; 32
     bf0:	2c 91       	ld	r18, X
     bf2:	90 97       	sbiw	r26, 0x20	; 32
     bf4:	78 01       	movw	r14, r16
     bf6:	ee 0c       	add	r14, r14
     bf8:	ff 1c       	adc	r15, r15
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	9b 81       	ldd	r25, Y+3	; 0x03
     bfe:	fc 01       	movw	r30, r24
     c00:	ee 0d       	add	r30, r14
     c02:	ff 1d       	adc	r31, r15
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	00 80       	ld	r0, Z
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <_ZN3DDS6synclkEii+0x40>
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	0a 94       	dec	r0
     c12:	e2 f7       	brpl	.-8      	; 0xc0c <_ZN3DDS6synclkEii+0x3c>
     c14:	80 95       	com	r24
     c16:	28 23       	and	r18, r24
     c18:	90 96       	adiw	r26, 0x20	; 32
     c1a:	2c 93       	st	X, r18
     c1c:	90 97       	sbiw	r26, 0x20	; 32
     c1e:	89 ef       	ldi	r24, 0xF9	; 249
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <_ZN3DDS6synclkEii+0x52>
     c26:	00 c0       	rjmp	.+0      	; 0xc28 <_ZN3DDS6synclkEii+0x58>
     c28:	00 00       	nop
	_delay_ms(1);
	if(state>0) // ON
     c2a:	14 16       	cp	r1, r20
     c2c:	15 06       	cpc	r1, r21
     c2e:	e4 f4       	brge	.+56     	; 0xc68 <_ZN3DDS6synclkEii+0x98>
	{
		send_spi(DSS_CFR2); // Address
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
     c36:	e9 ef       	ldi	r30, 0xF9	; 249
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	31 97       	sbiw	r30, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <_ZN3DDS6synclkEii+0x6a>
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <_ZN3DDS6synclkEii+0x70>
     c40:	00 00       	nop
		_delay_ms(1);
		send_spi(0x00);
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
		send_spi(0x40);
     c48:	80 e4       	ldi	r24, 0x40	; 64
     c4a:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
		send_spi(0x08);
     c4e:	88 e0       	ldi	r24, 0x08	; 8
     c50:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
		send_spi(0x20);
     c54:	80 e2       	ldi	r24, 0x20	; 32
     c56:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
     c5a:	89 ef       	ldi	r24, 0xF9	; 249
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <_ZN3DDS6synclkEii+0x8e>
     c62:	00 c0       	rjmp	.+0      	; 0xc64 <_ZN3DDS6synclkEii+0x94>
     c64:	00 00       	nop
     c66:	1b c0       	rjmp	.+54     	; 0xc9e <_ZN3DDS6synclkEii+0xce>
		_delay_ms(1);
	}
	else // OFF
	{
		send_spi(DSS_CFR2); // Address
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
     c6e:	e9 ef       	ldi	r30, 0xF9	; 249
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <_ZN3DDS6synclkEii+0xa2>
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <_ZN3DDS6synclkEii+0xa8>
     c78:	00 00       	nop
		_delay_ms(1);
		send_spi(0x00);
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
		send_spi(0x00);
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
		send_spi(0x08);
     c86:	88 e0       	ldi	r24, 0x08	; 8
     c88:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
		send_spi(0x20);
     c8c:	80 e2       	ldi	r24, 0x20	; 32
     c8e:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
     c92:	89 ef       	ldi	r24, 0xF9	; 249
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <_ZN3DDS6synclkEii+0xc6>
     c9a:	00 c0       	rjmp	.+0      	; 0xc9c <_ZN3DDS6synclkEii+0xcc>
     c9c:	00 00       	nop
		_delay_ms(1);
	}
	sbi(_SFR_IO8(*(CS_PORT+idx)),*(CS_PORTn+idx)); // CS High to disable SPI
     c9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ca0:	9f 81       	ldd	r25, Y+7	; 0x07
     ca2:	80 0f       	add	r24, r16
     ca4:	91 1f       	adc	r25, r17
     ca6:	fc 01       	movw	r30, r24
     ca8:	a0 81       	ld	r26, Z
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	90 96       	adiw	r26, 0x20	; 32
     cae:	4c 91       	ld	r20, X
     cb0:	90 97       	sbiw	r26, 0x20	; 32
     cb2:	ea 81       	ldd	r30, Y+2	; 0x02
     cb4:	fb 81       	ldd	r31, Y+3	; 0x03
     cb6:	ee 0d       	add	r30, r14
     cb8:	ff 1d       	adc	r31, r15
     cba:	21 e0       	ldi	r18, 0x01	; 1
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	c9 01       	movw	r24, r18
     cc0:	00 80       	ld	r0, Z
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <_ZN3DDS6synclkEii+0xf8>
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	0a 94       	dec	r0
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <_ZN3DDS6synclkEii+0xf4>
     ccc:	84 2b       	or	r24, r20
     cce:	90 96       	adiw	r26, 0x20	; 32
     cd0:	8c 93       	st	X, r24
     cd2:	90 97       	sbiw	r26, 0x20	; 32
     cd4:	89 ef       	ldi	r24, 0xF9	; 249
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <_ZN3DDS6synclkEii+0x108>
     cdc:	00 c0       	rjmp	.+0      	; 0xcde <_ZN3DDS6synclkEii+0x10e>
     cde:	00 00       	nop
	_delay_ms(1);
	sbi(_SFR_IO8(IOU_PORT),IOU_PORTn); // IOU High
     ce0:	ed 85       	ldd	r30, Y+13	; 0x0d
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	40 a1       	lds	r20, 0x40
     ce6:	c9 01       	movw	r24, r18
     ce8:	0a 84       	ldd	r0, Y+10	; 0x0a
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <_ZN3DDS6synclkEii+0x120>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	0a 94       	dec	r0
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <_ZN3DDS6synclkEii+0x11c>
     cf4:	84 2b       	or	r24, r20
     cf6:	80 a3       	lds	r24, 0x50
     cf8:	e9 ef       	ldi	r30, 0xF9	; 249
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	31 97       	sbiw	r30, 0x01	; 1
     cfe:	f1 f7       	brne	.-4      	; 0xcfc <_ZN3DDS6synclkEii+0x12c>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <_ZN3DDS6synclkEii+0x132>
     d02:	00 00       	nop
	_delay_ms(1);
	cbi(_SFR_IO8(IOU_PORT),IOU_PORTn); // IOU Low
     d04:	ed 85       	ldd	r30, Y+13	; 0x0d
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 a1       	lds	r24, 0x40
     d0a:	0a 84       	ldd	r0, Y+10	; 0x0a
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <_ZN3DDS6synclkEii+0x142>
     d0e:	22 0f       	add	r18, r18
     d10:	33 1f       	adc	r19, r19
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <_ZN3DDS6synclkEii+0x13e>
     d16:	20 95       	com	r18
     d18:	28 23       	and	r18, r24
     d1a:	20 a3       	lds	r18, 0x50
     d1c:	89 ef       	ldi	r24, 0xF9	; 249
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <_ZN3DDS6synclkEii+0x150>
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <_ZN3DDS6synclkEii+0x156>
     d26:	00 00       	nop
	_delay_ms(1);
}
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	08 95       	ret

00000d36 <_ZN3DDS8regwriteEiPhiS0_>:

void DDS::regwrite(int idx,unsigned char *adr,int datLen,unsigned char *dat)
{
     d36:	4f 92       	push	r4
     d38:	5f 92       	push	r5
     d3a:	6f 92       	push	r6
     d3c:	7f 92       	push	r7
     d3e:	8f 92       	push	r8
     d40:	9f 92       	push	r9
     d42:	af 92       	push	r10
     d44:	bf 92       	push	r11
     d46:	cf 92       	push	r12
     d48:	df 92       	push	r13
     d4a:	ef 92       	push	r14
     d4c:	ff 92       	push	r15
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	6c 01       	movw	r12, r24
     d58:	c6 2f       	mov	r28, r22
     d5a:	d7 2f       	mov	r29, r23
     d5c:	2a 01       	movw	r4, r20
     d5e:	39 01       	movw	r6, r18
     d60:	78 01       	movw	r14, r16
	USART_Send_ConstString("Register Write\n");
     d62:	8f e5       	ldi	r24, 0x5F	; 95
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_Z22USART_Send_ConstStringPKc>
	cbi(_SFR_IO8(*(CS_PORT+idx)),*(CS_PORTn+idx)); // CS Low to enable SPI
     d6a:	ac 2e       	mov	r10, r28
     d6c:	bd 2e       	mov	r11, r29
     d6e:	d6 01       	movw	r26, r12
     d70:	16 96       	adiw	r26, 0x06	; 6
     d72:	8d 91       	ld	r24, X+
     d74:	9c 91       	ld	r25, X
     d76:	17 97       	sbiw	r26, 0x07	; 7
     d78:	8a 0d       	add	r24, r10
     d7a:	9b 1d       	adc	r25, r11
     d7c:	ec 01       	movw	r28, r24
     d7e:	a8 81       	ld	r26, Y
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	90 96       	adiw	r26, 0x20	; 32
     d84:	2c 91       	ld	r18, X
     d86:	90 97       	sbiw	r26, 0x20	; 32
     d88:	45 01       	movw	r8, r10
     d8a:	88 0c       	add	r8, r8
     d8c:	99 1c       	adc	r9, r9
     d8e:	f6 01       	movw	r30, r12
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	fc 01       	movw	r30, r24
     d96:	e8 0d       	add	r30, r8
     d98:	f9 1d       	adc	r31, r9
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	00 80       	ld	r0, Z
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <_ZN3DDS8regwriteEiPhiS0_+0x70>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	0a 94       	dec	r0
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <_ZN3DDS8regwriteEiPhiS0_+0x6c>
     daa:	80 95       	com	r24
     dac:	28 23       	and	r18, r24
     dae:	90 96       	adiw	r26, 0x20	; 32
     db0:	2c 93       	st	X, r18
     db2:	89 ef       	ldi	r24, 0xF9	; 249
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <_ZN3DDS8regwriteEiPhiS0_+0x80>
     dba:	00 c0       	rjmp	.+0      	; 0xdbc <_ZN3DDS8regwriteEiPhiS0_+0x86>
     dbc:	00 00       	nop
	_delay_ms(1);
	send_spi(CharHexByte2Int(adr,0)); // Address
     dbe:	c2 01       	movw	r24, r4
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	0e 94 de 07 	call	0xfbc	; 0xfbc <_Z15CharHexByte2IntPhi>
     dc8:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
     dcc:	a9 ef       	ldi	r26, 0xF9	; 249
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	11 97       	sbiw	r26, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <_ZN3DDS8regwriteEiPhiS0_+0x9a>
     dd4:	00 c0       	rjmp	.+0      	; 0xdd6 <_ZN3DDS8regwriteEiPhiS0_+0xa0>
     dd6:	00 00       	nop
	_delay_ms(1);
	int cnt=0;
	while(cnt<datLen)
     dd8:	16 14       	cp	r1, r6
     dda:	17 04       	cpc	r1, r7
     ddc:	84 f4       	brge	.+32     	; 0xdfe <_ZN3DDS8regwriteEiPhiS0_+0xc8>
	_delay_ms(1);
	cbi(_SFR_IO8(IOU_PORT),IOU_PORTn); // IOU Low
	_delay_ms(1);
}

void DDS::regwrite(int idx,unsigned char *adr,int datLen,unsigned char *dat)
     dde:	e3 01       	movw	r28, r6
     de0:	cc 0f       	add	r28, r28
     de2:	dd 1f       	adc	r29, r29
     de4:	00 e0       	ldi	r16, 0x00	; 0
     de6:	10 e0       	ldi	r17, 0x00	; 0
	send_spi(CharHexByte2Int(adr,0)); // Address
	_delay_ms(1);
	int cnt=0;
	while(cnt<datLen)
	{
		send_spi(CharHexByte2Int(dat,cnt*2)); 
     de8:	c7 01       	movw	r24, r14
     dea:	b8 01       	movw	r22, r16
     dec:	0e 94 de 07 	call	0xfbc	; 0xfbc <_Z15CharHexByte2IntPhi>
     df0:	0e 94 9c 07 	call	0xf38	; 0xf38 <send_spi>
     df4:	0e 5f       	subi	r16, 0xFE	; 254
     df6:	1f 4f       	sbci	r17, 0xFF	; 255
	cbi(_SFR_IO8(*(CS_PORT+idx)),*(CS_PORTn+idx)); // CS Low to enable SPI
	_delay_ms(1);
	send_spi(CharHexByte2Int(adr,0)); // Address
	_delay_ms(1);
	int cnt=0;
	while(cnt<datLen)
     df8:	0c 17       	cp	r16, r28
     dfa:	1d 07       	cpc	r17, r29
     dfc:	a9 f7       	brne	.-22     	; 0xde8 <_ZN3DDS8regwriteEiPhiS0_+0xb2>
     dfe:	c9 ef       	ldi	r28, 0xF9	; 249
     e00:	d0 e0       	ldi	r29, 0x00	; 0
     e02:	21 97       	sbiw	r28, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <_ZN3DDS8regwriteEiPhiS0_+0xcc>
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <_ZN3DDS8regwriteEiPhiS0_+0xd2>
     e08:	00 00       	nop
	{
		send_spi(CharHexByte2Int(dat,cnt*2)); 
		cnt++;
	}
	_delay_ms(1);
	sbi(_SFR_IO8(*(CS_PORT+idx)),*(CS_PORTn+idx)); // CS High to disable SPI
     e0a:	f6 01       	movw	r30, r12
     e0c:	86 81       	ldd	r24, Z+6	; 0x06
     e0e:	97 81       	ldd	r25, Z+7	; 0x07
     e10:	8a 0d       	add	r24, r10
     e12:	9b 1d       	adc	r25, r11
     e14:	ec 01       	movw	r28, r24
     e16:	a8 81       	ld	r26, Y
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	90 96       	adiw	r26, 0x20	; 32
     e1c:	4c 91       	ld	r20, X
     e1e:	90 97       	sbiw	r26, 0x20	; 32
     e20:	02 80       	ldd	r0, Z+2	; 0x02
     e22:	f3 81       	ldd	r31, Z+3	; 0x03
     e24:	e0 2d       	mov	r30, r0
     e26:	e8 0d       	add	r30, r8
     e28:	f9 1d       	adc	r31, r9
     e2a:	21 e0       	ldi	r18, 0x01	; 1
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	c9 01       	movw	r24, r18
     e30:	00 80       	ld	r0, Z
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <_ZN3DDS8regwriteEiPhiS0_+0x102>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <_ZN3DDS8regwriteEiPhiS0_+0xfe>
     e3c:	84 2b       	or	r24, r20
     e3e:	90 96       	adiw	r26, 0x20	; 32
     e40:	8c 93       	st	X, r24
     e42:	e9 ef       	ldi	r30, 0xF9	; 249
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	31 97       	sbiw	r30, 0x01	; 1
     e48:	f1 f7       	brne	.-4      	; 0xe46 <_ZN3DDS8regwriteEiPhiS0_+0x110>
     e4a:	00 c0       	rjmp	.+0      	; 0xe4c <_ZN3DDS8regwriteEiPhiS0_+0x116>
     e4c:	00 00       	nop
	_delay_ms(1);
	sbi(_SFR_IO8(IOU_PORT),IOU_PORTn); // IOU High
     e4e:	d6 01       	movw	r26, r12
     e50:	1d 96       	adiw	r26, 0x0d	; 13
     e52:	ec 91       	ld	r30, X
     e54:	1d 97       	sbiw	r26, 0x0d	; 13
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	40 a1       	lds	r20, 0x40
     e5a:	c9 01       	movw	r24, r18
     e5c:	1a 96       	adiw	r26, 0x0a	; 10
     e5e:	0c 90       	ld	r0, X
     e60:	1a 97       	sbiw	r26, 0x0a	; 10
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <_ZN3DDS8regwriteEiPhiS0_+0x132>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <_ZN3DDS8regwriteEiPhiS0_+0x12e>
     e6c:	84 2b       	or	r24, r20
     e6e:	80 a3       	lds	r24, 0x50
     e70:	c9 ef       	ldi	r28, 0xF9	; 249
     e72:	d0 e0       	ldi	r29, 0x00	; 0
     e74:	21 97       	sbiw	r28, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <_ZN3DDS8regwriteEiPhiS0_+0x13e>
     e78:	00 c0       	rjmp	.+0      	; 0xe7a <_ZN3DDS8regwriteEiPhiS0_+0x144>
     e7a:	00 00       	nop
	_delay_ms(1);
	cbi(_SFR_IO8(IOU_PORT),IOU_PORTn); // IOU Low
     e7c:	1d 96       	adiw	r26, 0x0d	; 13
     e7e:	ec 91       	ld	r30, X
     e80:	1d 97       	sbiw	r26, 0x0d	; 13
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 a1       	lds	r24, 0x40
     e86:	1a 96       	adiw	r26, 0x0a	; 10
     e88:	0c 90       	ld	r0, X
     e8a:	1a 97       	sbiw	r26, 0x0a	; 10
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <_ZN3DDS8regwriteEiPhiS0_+0x15c>
     e8e:	22 0f       	add	r18, r18
     e90:	33 1f       	adc	r19, r19
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <_ZN3DDS8regwriteEiPhiS0_+0x158>
     e96:	20 95       	com	r18
     e98:	28 23       	and	r18, r24
     e9a:	20 a3       	lds	r18, 0x50
     e9c:	c9 ef       	ldi	r28, 0xF9	; 249
     e9e:	d0 e0       	ldi	r29, 0x00	; 0
     ea0:	21 97       	sbiw	r28, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <_ZN3DDS8regwriteEiPhiS0_+0x16a>
     ea4:	00 c0       	rjmp	.+0      	; 0xea6 <_ZN3DDS8regwriteEiPhiS0_+0x170>
     ea6:	00 00       	nop
	_delay_ms(1);	
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	ff 90       	pop	r15
     eb2:	ef 90       	pop	r14
     eb4:	df 90       	pop	r13
     eb6:	cf 90       	pop	r12
     eb8:	bf 90       	pop	r11
     eba:	af 90       	pop	r10
     ebc:	9f 90       	pop	r9
     ebe:	8f 90       	pop	r8
     ec0:	7f 90       	pop	r7
     ec2:	6f 90       	pop	r6
     ec4:	5f 90       	pop	r5
     ec6:	4f 90       	pop	r4
     ec8:	08 95       	ret

00000eca <setup_spi>:
#endif

void setup_spi(uint8_t mode, int dord, int interrupt, uint8_t clock)
{
  // specify pin directions for SPI pins on port B
  if (clock == SPI_SLAVE) { // if slave SS and SCK is input
     eca:	20 3f       	cpi	r18, 0xF0	; 240
     ecc:	29 f4       	brne	.+10     	; 0xed8 <setup_spi+0xe>
    DDRB &= ~(1<<SPI_MOSI_PIN); // input
     ece:	23 98       	cbi	0x04, 3	; 4
    DDRB |= (1<<SPI_MISO_PIN); // output
     ed0:	24 9a       	sbi	0x04, 4	; 4
    DDRB &= ~(1<<SPI_SS_PIN); // input
     ed2:	22 98       	cbi	0x04, 2	; 4
    DDRB &= ~(1<<SPI_SCK_PIN);// input
     ed4:	25 98       	cbi	0x04, 5	; 4
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <setup_spi+0x16>
  } else {
    DDRB |= (1<<SPI_MOSI_PIN); // output
     ed8:	23 9a       	sbi	0x04, 3	; 4
    DDRB &= ~(1<<SPI_MISO_PIN); // input
     eda:	24 98       	cbi	0x04, 4	; 4
    DDRB |= (1<<SPI_SCK_PIN);// output
     edc:	25 9a       	sbi	0x04, 5	; 4
    DDRB |= (1<<SPI_SS_PIN);// output
     ede:	22 9a       	sbi	0x04, 2	; 4
  }
  SPCR = ((interrupt ? 1 : 0)<<SPIE) // interrupt enabled
     ee0:	41 15       	cp	r20, r1
     ee2:	51 05       	cpc	r21, r1
     ee4:	11 f0       	breq	.+4      	; 0xeea <setup_spi+0x20>
     ee6:	50 ec       	ldi	r21, 0xC0	; 192
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <setup_spi+0x22>
     eea:	50 e4       	ldi	r21, 0x40	; 64
     eec:	62 95       	swap	r22
     eee:	66 0f       	add	r22, r22
     ef0:	60 7e       	andi	r22, 0xE0	; 224
     ef2:	20 3f       	cpi	r18, 0xF0	; 240
     ef4:	11 f0       	breq	.+4      	; 0xefa <setup_spi+0x30>
     ef6:	40 e1       	ldi	r20, 0x10	; 16
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <setup_spi+0x32>
     efa:	40 e0       	ldi	r20, 0x00	; 0
    | (1<<SPE) // enable SPI
    | (dord<<DORD) // LSB or MSB
    | (((clock != SPI_SLAVE) ? 1 : 0) <<MSTR) // Slave or Master
    | (((mode & 0x02) == 2) << CPOL) // clock timing mode CPOL
     efc:	90 e0       	ldi	r25, 0x00	; 0
    DDRB |= (1<<SPI_MOSI_PIN); // output
    DDRB &= ~(1<<SPI_MISO_PIN); // input
    DDRB |= (1<<SPI_SCK_PIN);// output
    DDRB |= (1<<SPI_SS_PIN);// output
  }
  SPCR = ((interrupt ? 1 : 0)<<SPIE) // interrupt enabled
     efe:	81 ff       	sbrs	r24, 1
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <setup_spi+0x3c>
     f02:	38 e0       	ldi	r19, 0x08	; 8
     f04:	01 c0       	rjmp	.+2      	; 0xf08 <setup_spi+0x3e>
     f06:	30 e0       	ldi	r19, 0x00	; 0
    | (1<<SPE) // enable SPI
    | (dord<<DORD) // LSB or MSB
    | (((clock != SPI_SLAVE) ? 1 : 0) <<MSTR) // Slave or Master
    | (((mode & 0x02) == 2) << CPOL) // clock timing mode CPOL
    | (((mode & 0x01)) << CPHA) // clock timing mode CPHA
     f08:	81 70       	andi	r24, 0x01	; 1
     f0a:	90 70       	andi	r25, 0x00	; 0
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
    DDRB |= (1<<SPI_MOSI_PIN); // output
    DDRB &= ~(1<<SPI_MISO_PIN); // input
    DDRB |= (1<<SPI_SCK_PIN);// output
    DDRB |= (1<<SPI_SS_PIN);// output
  }
  SPCR = ((interrupt ? 1 : 0)<<SPIE) // interrupt enabled
     f14:	86 2b       	or	r24, r22
     f16:	92 2f       	mov	r25, r18
     f18:	92 70       	andi	r25, 0x02	; 2
     f1a:	89 2b       	or	r24, r25
     f1c:	92 2f       	mov	r25, r18
     f1e:	91 70       	andi	r25, 0x01	; 1
     f20:	89 2b       	or	r24, r25
     f22:	85 2b       	or	r24, r21
     f24:	84 2b       	or	r24, r20
     f26:	83 2b       	or	r24, r19
     f28:	8c bd       	out	0x2c, r24	; 44
    | (((clock != SPI_SLAVE) ? 1 : 0) <<MSTR) // Slave or Master
    | (((mode & 0x02) == 2) << CPOL) // clock timing mode CPOL
    | (((mode & 0x01)) << CPHA) // clock timing mode CPHA
    | (((clock & 0x02) == 2) << SPR1) // cpu clock divisor SPR1
    | ((clock & 0x01) << SPR0); // cpu clock divisor SPR0
  SPSR = (((clock & 0x04) == 4) << SPI2X); // clock divisor SPI2X
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	22 ff       	sbrs	r18, 2
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	8d bd       	out	0x2d, r24	; 45
}
     f32:	08 95       	ret

00000f34 <disable_spi>:

void disable_spi()
{
  SPCR = 0;
     f34:	1c bc       	out	0x2c, r1	; 44
}
     f36:	08 95       	ret

00000f38 <send_spi>:

uint8_t send_spi(uint8_t out)
{
  SPDR = out;
     f38:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1<<SPIF)));
     f3a:	0d b4       	in	r0, 0x2d	; 45
     f3c:	07 fe       	sbrs	r0, 7
     f3e:	fd cf       	rjmp	.-6      	; 0xf3a <send_spi+0x2>
  return SPDR;
     f40:	8e b5       	in	r24, 0x2e	; 46
}
     f42:	08 95       	ret

00000f44 <received_from_spi>:

uint8_t received_from_spi(uint8_t data)
{
  SPDR = data;
     f44:	8e bd       	out	0x2e, r24	; 46
  return SPDR;
     f46:	8e b5       	in	r24, 0x2e	; 46
}
     f48:	08 95       	ret

00000f4a <_Z10USART_Initj>:
#include <math.h>

void USART_Init( unsigned int ubrr)
{
/*Set baud rate */
UBRR0H = (unsigned char)(ubrr>>8);
     f4a:	90 93 c5 00 	sts	0x00C5, r25
UBRR0L = (unsigned char)ubrr;
     f4e:	80 93 c4 00 	sts	0x00C4, r24
//Enable receiver and transmitter */
UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     f52:	88 e1       	ldi	r24, 0x18	; 24
     f54:	80 93 c1 00 	sts	0x00C1, r24
/* Set frame format: 8data, 2stop bit */
UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     f58:	8e e0       	ldi	r24, 0x0E	; 14
     f5a:	80 93 c2 00 	sts	0x00C2, r24
}
     f5e:	08 95       	ret

00000f60 <_Z15USART_Send_Byteh>:

void USART_Send_Byte(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     f60:	e0 ec       	ldi	r30, 0xC0	; 192
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	90 81       	ld	r25, Z
     f66:	95 ff       	sbrs	r25, 5
     f68:	fd cf       	rjmp	.-6      	; 0xf64 <_Z15USART_Send_Byteh+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = char(data);
     f6a:	80 93 c6 00 	sts	0x00C6, r24
}
     f6e:	08 95       	ret

00000f70 <_Z17USART_Send_StringPh>:

void USART_Send_String(unsigned char *str)
{
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	ec 01       	movw	r28, r24
	while (*str) 
     f76:	88 81       	ld	r24, Y
     f78:	88 23       	and	r24, r24
     f7a:	31 f0       	breq	.+12     	; 0xf88 <_Z17USART_Send_StringPh+0x18>
	while ( !( UCSR0A & (1<<UDRE0)) );
	/* Put data into buffer, sends the data */
	UDR0 = char(data);
}

void USART_Send_String(unsigned char *str)
     f7c:	21 96       	adiw	r28, 0x01	; 1
{
	while (*str) 
	USART_Send_Byte(*str++);
     f7e:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z15USART_Send_Byteh>
	UDR0 = char(data);
}

void USART_Send_String(unsigned char *str)
{
	while (*str) 
     f82:	89 91       	ld	r24, Y+
     f84:	88 23       	and	r24, r24
     f86:	d9 f7       	brne	.-10     	; 0xf7e <_Z17USART_Send_StringPh+0xe>
	USART_Send_Byte(*str++);
}
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	08 95       	ret

00000f8e <_Z22USART_Send_ConstStringPKc>:

void USART_Send_ConstString(const char *str)
{
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	ec 01       	movw	r28, r24
	while (*str)
     f94:	88 81       	ld	r24, Y
     f96:	88 23       	and	r24, r24
     f98:	31 f0       	breq	.+12     	; 0xfa6 <_Z22USART_Send_ConstStringPKc+0x18>
{
	while (*str) 
	USART_Send_Byte(*str++);
}

void USART_Send_ConstString(const char *str)
     f9a:	21 96       	adiw	r28, 0x01	; 1
{
	while (*str)
	USART_Send_Byte(*str++);
     f9c:	0e 94 b0 07 	call	0xf60	; 0xf60 <_Z15USART_Send_Byteh>
	USART_Send_Byte(*str++);
}

void USART_Send_ConstString(const char *str)
{
	while (*str)
     fa0:	89 91       	ld	r24, Y+
     fa2:	88 23       	and	r24, r24
     fa4:	d9 f7       	brne	.-10     	; 0xf9c <_Z22USART_Send_ConstStringPKc+0xe>
	USART_Send_Byte(*str++);
}
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	08 95       	ret

00000fac <_Z13USART_Receivev>:
*/

unsigned char USART_Receive( void )
{
/* Wait for data to be received */
while ( !(UCSR0A & (1<<RXC0)) )
     fac:	e0 ec       	ldi	r30, 0xC0	; 192
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	88 23       	and	r24, r24
     fb4:	ec f7       	brge	.-6      	; 0xfb0 <_Z13USART_Receivev+0x4>
;
/* Get and return received data from buffer */
return UDR0;
     fb6:	80 91 c6 00 	lds	r24, 0x00C6
}
     fba:	08 95       	ret

00000fbc <_Z15CharHexByte2IntPhi>:


int CharHexByte2Int(unsigned char *str,int idx)
{
     fbc:	ac 01       	movw	r20, r24
	char atemp[10];
	while (cnt<2)
	{
		if (cnt==0) {base=16;}
		if (cnt==1) {base=1;}
		if(*(str+idx+cnt)>='0'&&*(str+idx+cnt)<='9') {num=num+(((int) *(str+idx+cnt))-48)*base;};
     fbe:	e6 2f       	mov	r30, r22
     fc0:	f7 2f       	mov	r31, r23
     fc2:	dc 01       	movw	r26, r24
     fc4:	ae 0f       	add	r26, r30
     fc6:	bf 1f       	adc	r27, r31
     fc8:	2c 91       	ld	r18, X
     fca:	82 2f       	mov	r24, r18
     fcc:	80 53       	subi	r24, 0x30	; 48
     fce:	8a 30       	cpi	r24, 0x0A	; 10
     fd0:	50 f4       	brcc	.+20     	; 0xfe6 <_Z15CharHexByte2IntPhi+0x2a>
     fd2:	82 2f       	mov	r24, r18
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	c0 97       	sbiw	r24, 0x30	; 48
     fd8:	82 95       	swap	r24
     fda:	92 95       	swap	r25
     fdc:	90 7f       	andi	r25, 0xF0	; 240
     fde:	98 27       	eor	r25, r24
     fe0:	80 7f       	andi	r24, 0xF0	; 240
     fe2:	98 27       	eor	r25, r24
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <_Z15CharHexByte2IntPhi+0x2e>
}


int CharHexByte2Int(unsigned char *str,int idx)
{
	int num=0,cnt=0,base=0;
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	90 e0       	ldi	r25, 0x00	; 0
	while (cnt<2)
	{
		if (cnt==0) {base=16;}
		if (cnt==1) {base=1;}
		if(*(str+idx+cnt)>='0'&&*(str+idx+cnt)<='9') {num=num+(((int) *(str+idx+cnt))-48)*base;};
		if(*(str+idx+cnt)>='a'&&*(str+idx+cnt)<='f') {num=num+(((int) *(str+idx+cnt))-87)*base;};
     fea:	32 2f       	mov	r19, r18
     fec:	31 56       	subi	r19, 0x61	; 97
     fee:	36 30       	cpi	r19, 0x06	; 6
     ff0:	58 f4       	brcc	.+22     	; 0x1008 <_Z15CharHexByte2IntPhi+0x4c>
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	27 55       	subi	r18, 0x57	; 87
     ff6:	30 40       	sbci	r19, 0x00	; 0
     ff8:	22 95       	swap	r18
     ffa:	32 95       	swap	r19
     ffc:	30 7f       	andi	r19, 0xF0	; 240
     ffe:	32 27       	eor	r19, r18
    1000:	20 7f       	andi	r18, 0xF0	; 240
    1002:	32 27       	eor	r19, r18
    1004:	82 0f       	add	r24, r18
    1006:	93 1f       	adc	r25, r19
	char atemp[10];
	while (cnt<2)
	{
		if (cnt==0) {base=16;}
		if (cnt==1) {base=1;}
		if(*(str+idx+cnt)>='0'&&*(str+idx+cnt)<='9') {num=num+(((int) *(str+idx+cnt))-48)*base;};
    1008:	e4 0f       	add	r30, r20
    100a:	f5 1f       	adc	r31, r21
    100c:	21 81       	ldd	r18, Z+1	; 0x01
    100e:	32 2f       	mov	r19, r18
    1010:	30 53       	subi	r19, 0x30	; 48
    1012:	3a 30       	cpi	r19, 0x0A	; 10
    1014:	30 f4       	brcc	.+12     	; 0x1022 <_Z15CharHexByte2IntPhi+0x66>
    1016:	42 2f       	mov	r20, r18
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	40 53       	subi	r20, 0x30	; 48
    101c:	50 40       	sbci	r21, 0x00	; 0
    101e:	84 0f       	add	r24, r20
    1020:	95 1f       	adc	r25, r21
		if(*(str+idx+cnt)>='a'&&*(str+idx+cnt)<='f') {num=num+(((int) *(str+idx+cnt))-87)*base;};
    1022:	32 2f       	mov	r19, r18
    1024:	31 56       	subi	r19, 0x61	; 97
    1026:	36 30       	cpi	r19, 0x06	; 6
    1028:	28 f4       	brcc	.+10     	; 0x1034 <_Z15CharHexByte2IntPhi+0x78>
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	27 55       	subi	r18, 0x57	; 87
    102e:	30 40       	sbci	r19, 0x00	; 0
    1030:	82 0f       	add	r24, r18
    1032:	93 1f       	adc	r25, r19
		cnt++;
	}
	//sprintf(atemp,"%c%c=%d\n",*(str+idx),*(str+idx+1),num);
	//USART_Send_String((unsigned char*)atemp);
	return num;
}
    1034:	08 95       	ret

00001036 <atoi>:
    1036:	fc 01       	movw	r30, r24
    1038:	88 27       	eor	r24, r24
    103a:	99 27       	eor	r25, r25
    103c:	e8 94       	clt
    103e:	21 91       	ld	r18, Z+
    1040:	20 32       	cpi	r18, 0x20	; 32
    1042:	e9 f3       	breq	.-6      	; 0x103e <atoi+0x8>
    1044:	29 30       	cpi	r18, 0x09	; 9
    1046:	10 f0       	brcs	.+4      	; 0x104c <atoi+0x16>
    1048:	2e 30       	cpi	r18, 0x0E	; 14
    104a:	c8 f3       	brcs	.-14     	; 0x103e <atoi+0x8>
    104c:	2b 32       	cpi	r18, 0x2B	; 43
    104e:	41 f0       	breq	.+16     	; 0x1060 <atoi+0x2a>
    1050:	2d 32       	cpi	r18, 0x2D	; 45
    1052:	39 f4       	brne	.+14     	; 0x1062 <atoi+0x2c>
    1054:	68 94       	set
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <atoi+0x2a>
    1058:	0e 94 39 08 	call	0x1072	; 0x1072 <__mulhi_const_10>
    105c:	82 0f       	add	r24, r18
    105e:	91 1d       	adc	r25, r1
    1060:	21 91       	ld	r18, Z+
    1062:	20 53       	subi	r18, 0x30	; 48
    1064:	2a 30       	cpi	r18, 0x0A	; 10
    1066:	c0 f3       	brcs	.-16     	; 0x1058 <atoi+0x22>
    1068:	1e f4       	brtc	.+6      	; 0x1070 <atoi+0x3a>
    106a:	90 95       	com	r25
    106c:	81 95       	neg	r24
    106e:	9f 4f       	sbci	r25, 0xFF	; 255
    1070:	08 95       	ret

00001072 <__mulhi_const_10>:
    1072:	7a e0       	ldi	r23, 0x0A	; 10
    1074:	97 9f       	mul	r25, r23
    1076:	90 2d       	mov	r25, r0
    1078:	87 9f       	mul	r24, r23
    107a:	80 2d       	mov	r24, r0
    107c:	91 0d       	add	r25, r1
    107e:	11 24       	eor	r1, r1
    1080:	08 95       	ret

00001082 <sprintf>:
    1082:	ae e0       	ldi	r26, 0x0E	; 14
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e7 e4       	ldi	r30, 0x47	; 71
    1088:	f8 e0       	ldi	r31, 0x08	; 8
    108a:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__prologue_saves__+0x1c>
    108e:	0d 89       	ldd	r16, Y+21	; 0x15
    1090:	1e 89       	ldd	r17, Y+22	; 0x16
    1092:	86 e0       	ldi	r24, 0x06	; 6
    1094:	8c 83       	std	Y+4, r24	; 0x04
    1096:	1a 83       	std	Y+2, r17	; 0x02
    1098:	09 83       	std	Y+1, r16	; 0x01
    109a:	8f ef       	ldi	r24, 0xFF	; 255
    109c:	9f e7       	ldi	r25, 0x7F	; 127
    109e:	9e 83       	std	Y+6, r25	; 0x06
    10a0:	8d 83       	std	Y+5, r24	; 0x05
    10a2:	ae 01       	movw	r20, r28
    10a4:	47 5e       	subi	r20, 0xE7	; 231
    10a6:	5f 4f       	sbci	r21, 0xFF	; 255
    10a8:	ce 01       	movw	r24, r28
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	6f 89       	ldd	r22, Y+23	; 0x17
    10ae:	78 8d       	ldd	r23, Y+24	; 0x18
    10b0:	0e 94 63 08 	call	0x10c6	; 0x10c6 <vfprintf>
    10b4:	ef 81       	ldd	r30, Y+7	; 0x07
    10b6:	f8 85       	ldd	r31, Y+8	; 0x08
    10b8:	e0 0f       	add	r30, r16
    10ba:	f1 1f       	adc	r31, r17
    10bc:	10 82       	st	Z, r1
    10be:	2e 96       	adiw	r28, 0x0e	; 14
    10c0:	e4 e0       	ldi	r30, 0x04	; 4
    10c2:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <__epilogue_restores__+0x1c>

000010c6 <vfprintf>:
    10c6:	ad e0       	ldi	r26, 0x0D	; 13
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e9 e6       	ldi	r30, 0x69	; 105
    10cc:	f8 e0       	ldi	r31, 0x08	; 8
    10ce:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__prologue_saves__>
    10d2:	3c 01       	movw	r6, r24
    10d4:	7d 87       	std	Y+13, r23	; 0x0d
    10d6:	6c 87       	std	Y+12, r22	; 0x0c
    10d8:	5a 01       	movw	r10, r20
    10da:	fc 01       	movw	r30, r24
    10dc:	17 82       	std	Z+7, r1	; 0x07
    10de:	16 82       	std	Z+6, r1	; 0x06
    10e0:	83 81       	ldd	r24, Z+3	; 0x03
    10e2:	81 ff       	sbrs	r24, 1
    10e4:	c8 c1       	rjmp	.+912    	; 0x1476 <vfprintf+0x3b0>
    10e6:	2e 01       	movw	r4, r28
    10e8:	08 94       	sec
    10ea:	41 1c       	adc	r4, r1
    10ec:	51 1c       	adc	r5, r1
    10ee:	f3 01       	movw	r30, r6
    10f0:	93 81       	ldd	r25, Z+3	; 0x03
    10f2:	ec 85       	ldd	r30, Y+12	; 0x0c
    10f4:	fd 85       	ldd	r31, Y+13	; 0x0d
    10f6:	93 fd       	sbrc	r25, 3
    10f8:	85 91       	lpm	r24, Z+
    10fa:	93 ff       	sbrs	r25, 3
    10fc:	81 91       	ld	r24, Z+
    10fe:	fd 87       	std	Y+13, r31	; 0x0d
    1100:	ec 87       	std	Y+12, r30	; 0x0c
    1102:	88 23       	and	r24, r24
    1104:	09 f4       	brne	.+2      	; 0x1108 <vfprintf+0x42>
    1106:	b3 c1       	rjmp	.+870    	; 0x146e <vfprintf+0x3a8>
    1108:	85 32       	cpi	r24, 0x25	; 37
    110a:	41 f4       	brne	.+16     	; 0x111c <vfprintf+0x56>
    110c:	93 fd       	sbrc	r25, 3
    110e:	85 91       	lpm	r24, Z+
    1110:	93 ff       	sbrs	r25, 3
    1112:	81 91       	ld	r24, Z+
    1114:	fd 87       	std	Y+13, r31	; 0x0d
    1116:	ec 87       	std	Y+12, r30	; 0x0c
    1118:	85 32       	cpi	r24, 0x25	; 37
    111a:	29 f4       	brne	.+10     	; 0x1126 <vfprintf+0x60>
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	b3 01       	movw	r22, r6
    1120:	0e 94 57 0a 	call	0x14ae	; 0x14ae <fputc>
    1124:	e4 cf       	rjmp	.-56     	; 0x10ee <vfprintf+0x28>
    1126:	ff 24       	eor	r15, r15
    1128:	ee 24       	eor	r14, r14
    112a:	10 e0       	ldi	r17, 0x00	; 0
    112c:	10 32       	cpi	r17, 0x20	; 32
    112e:	b0 f4       	brcc	.+44     	; 0x115c <vfprintf+0x96>
    1130:	8b 32       	cpi	r24, 0x2B	; 43
    1132:	69 f0       	breq	.+26     	; 0x114e <vfprintf+0x88>
    1134:	8c 32       	cpi	r24, 0x2C	; 44
    1136:	28 f4       	brcc	.+10     	; 0x1142 <vfprintf+0x7c>
    1138:	80 32       	cpi	r24, 0x20	; 32
    113a:	51 f0       	breq	.+20     	; 0x1150 <vfprintf+0x8a>
    113c:	83 32       	cpi	r24, 0x23	; 35
    113e:	71 f4       	brne	.+28     	; 0x115c <vfprintf+0x96>
    1140:	0b c0       	rjmp	.+22     	; 0x1158 <vfprintf+0x92>
    1142:	8d 32       	cpi	r24, 0x2D	; 45
    1144:	39 f0       	breq	.+14     	; 0x1154 <vfprintf+0x8e>
    1146:	80 33       	cpi	r24, 0x30	; 48
    1148:	49 f4       	brne	.+18     	; 0x115c <vfprintf+0x96>
    114a:	11 60       	ori	r17, 0x01	; 1
    114c:	2c c0       	rjmp	.+88     	; 0x11a6 <vfprintf+0xe0>
    114e:	12 60       	ori	r17, 0x02	; 2
    1150:	14 60       	ori	r17, 0x04	; 4
    1152:	29 c0       	rjmp	.+82     	; 0x11a6 <vfprintf+0xe0>
    1154:	18 60       	ori	r17, 0x08	; 8
    1156:	27 c0       	rjmp	.+78     	; 0x11a6 <vfprintf+0xe0>
    1158:	10 61       	ori	r17, 0x10	; 16
    115a:	25 c0       	rjmp	.+74     	; 0x11a6 <vfprintf+0xe0>
    115c:	17 fd       	sbrc	r17, 7
    115e:	2e c0       	rjmp	.+92     	; 0x11bc <vfprintf+0xf6>
    1160:	28 2f       	mov	r18, r24
    1162:	20 53       	subi	r18, 0x30	; 48
    1164:	2a 30       	cpi	r18, 0x0A	; 10
    1166:	98 f4       	brcc	.+38     	; 0x118e <vfprintf+0xc8>
    1168:	16 ff       	sbrs	r17, 6
    116a:	08 c0       	rjmp	.+16     	; 0x117c <vfprintf+0xb6>
    116c:	8f 2d       	mov	r24, r15
    116e:	88 0f       	add	r24, r24
    1170:	f8 2e       	mov	r15, r24
    1172:	ff 0c       	add	r15, r15
    1174:	ff 0c       	add	r15, r15
    1176:	f8 0e       	add	r15, r24
    1178:	f2 0e       	add	r15, r18
    117a:	15 c0       	rjmp	.+42     	; 0x11a6 <vfprintf+0xe0>
    117c:	8e 2d       	mov	r24, r14
    117e:	88 0f       	add	r24, r24
    1180:	e8 2e       	mov	r14, r24
    1182:	ee 0c       	add	r14, r14
    1184:	ee 0c       	add	r14, r14
    1186:	e8 0e       	add	r14, r24
    1188:	e2 0e       	add	r14, r18
    118a:	10 62       	ori	r17, 0x20	; 32
    118c:	0c c0       	rjmp	.+24     	; 0x11a6 <vfprintf+0xe0>
    118e:	8e 32       	cpi	r24, 0x2E	; 46
    1190:	21 f4       	brne	.+8      	; 0x119a <vfprintf+0xd4>
    1192:	16 fd       	sbrc	r17, 6
    1194:	6c c1       	rjmp	.+728    	; 0x146e <vfprintf+0x3a8>
    1196:	10 64       	ori	r17, 0x40	; 64
    1198:	06 c0       	rjmp	.+12     	; 0x11a6 <vfprintf+0xe0>
    119a:	8c 36       	cpi	r24, 0x6C	; 108
    119c:	11 f4       	brne	.+4      	; 0x11a2 <vfprintf+0xdc>
    119e:	10 68       	ori	r17, 0x80	; 128
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <vfprintf+0xe0>
    11a2:	88 36       	cpi	r24, 0x68	; 104
    11a4:	59 f4       	brne	.+22     	; 0x11bc <vfprintf+0xf6>
    11a6:	ec 85       	ldd	r30, Y+12	; 0x0c
    11a8:	fd 85       	ldd	r31, Y+13	; 0x0d
    11aa:	93 fd       	sbrc	r25, 3
    11ac:	85 91       	lpm	r24, Z+
    11ae:	93 ff       	sbrs	r25, 3
    11b0:	81 91       	ld	r24, Z+
    11b2:	fd 87       	std	Y+13, r31	; 0x0d
    11b4:	ec 87       	std	Y+12, r30	; 0x0c
    11b6:	88 23       	and	r24, r24
    11b8:	09 f0       	breq	.+2      	; 0x11bc <vfprintf+0xf6>
    11ba:	b8 cf       	rjmp	.-144    	; 0x112c <vfprintf+0x66>
    11bc:	98 2f       	mov	r25, r24
    11be:	95 54       	subi	r25, 0x45	; 69
    11c0:	93 30       	cpi	r25, 0x03	; 3
    11c2:	18 f0       	brcs	.+6      	; 0x11ca <vfprintf+0x104>
    11c4:	90 52       	subi	r25, 0x20	; 32
    11c6:	93 30       	cpi	r25, 0x03	; 3
    11c8:	38 f4       	brcc	.+14     	; 0x11d8 <vfprintf+0x112>
    11ca:	24 e0       	ldi	r18, 0x04	; 4
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	a2 0e       	add	r10, r18
    11d0:	b3 1e       	adc	r11, r19
    11d2:	3f e3       	ldi	r19, 0x3F	; 63
    11d4:	39 83       	std	Y+1, r19	; 0x01
    11d6:	0f c0       	rjmp	.+30     	; 0x11f6 <vfprintf+0x130>
    11d8:	83 36       	cpi	r24, 0x63	; 99
    11da:	31 f0       	breq	.+12     	; 0x11e8 <vfprintf+0x122>
    11dc:	83 37       	cpi	r24, 0x73	; 115
    11de:	81 f0       	breq	.+32     	; 0x1200 <vfprintf+0x13a>
    11e0:	83 35       	cpi	r24, 0x53	; 83
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <vfprintf+0x120>
    11e4:	5a c0       	rjmp	.+180    	; 0x129a <vfprintf+0x1d4>
    11e6:	22 c0       	rjmp	.+68     	; 0x122c <vfprintf+0x166>
    11e8:	f5 01       	movw	r30, r10
    11ea:	80 81       	ld	r24, Z
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	22 e0       	ldi	r18, 0x02	; 2
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	a2 0e       	add	r10, r18
    11f4:	b3 1e       	adc	r11, r19
    11f6:	21 e0       	ldi	r18, 0x01	; 1
    11f8:	c2 2e       	mov	r12, r18
    11fa:	d1 2c       	mov	r13, r1
    11fc:	42 01       	movw	r8, r4
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <vfprintf+0x162>
    1200:	92 e0       	ldi	r25, 0x02	; 2
    1202:	29 2e       	mov	r2, r25
    1204:	31 2c       	mov	r3, r1
    1206:	2a 0c       	add	r2, r10
    1208:	3b 1c       	adc	r3, r11
    120a:	f5 01       	movw	r30, r10
    120c:	80 80       	ld	r8, Z
    120e:	91 80       	ldd	r9, Z+1	; 0x01
    1210:	16 ff       	sbrs	r17, 6
    1212:	03 c0       	rjmp	.+6      	; 0x121a <vfprintf+0x154>
    1214:	6f 2d       	mov	r22, r15
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	02 c0       	rjmp	.+4      	; 0x121e <vfprintf+0x158>
    121a:	6f ef       	ldi	r22, 0xFF	; 255
    121c:	7f ef       	ldi	r23, 0xFF	; 255
    121e:	c4 01       	movw	r24, r8
    1220:	0e 94 4c 0a 	call	0x1498	; 0x1498 <strnlen>
    1224:	6c 01       	movw	r12, r24
    1226:	51 01       	movw	r10, r2
    1228:	1f 77       	andi	r17, 0x7F	; 127
    122a:	15 c0       	rjmp	.+42     	; 0x1256 <vfprintf+0x190>
    122c:	82 e0       	ldi	r24, 0x02	; 2
    122e:	28 2e       	mov	r2, r24
    1230:	31 2c       	mov	r3, r1
    1232:	2a 0c       	add	r2, r10
    1234:	3b 1c       	adc	r3, r11
    1236:	f5 01       	movw	r30, r10
    1238:	80 80       	ld	r8, Z
    123a:	91 80       	ldd	r9, Z+1	; 0x01
    123c:	16 ff       	sbrs	r17, 6
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <vfprintf+0x180>
    1240:	6f 2d       	mov	r22, r15
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	02 c0       	rjmp	.+4      	; 0x124a <vfprintf+0x184>
    1246:	6f ef       	ldi	r22, 0xFF	; 255
    1248:	7f ef       	ldi	r23, 0xFF	; 255
    124a:	c4 01       	movw	r24, r8
    124c:	0e 94 41 0a 	call	0x1482	; 0x1482 <strnlen_P>
    1250:	6c 01       	movw	r12, r24
    1252:	10 68       	ori	r17, 0x80	; 128
    1254:	51 01       	movw	r10, r2
    1256:	13 fd       	sbrc	r17, 3
    1258:	1c c0       	rjmp	.+56     	; 0x1292 <vfprintf+0x1cc>
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <vfprintf+0x1a2>
    125c:	80 e2       	ldi	r24, 0x20	; 32
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	b3 01       	movw	r22, r6
    1262:	0e 94 57 0a 	call	0x14ae	; 0x14ae <fputc>
    1266:	ea 94       	dec	r14
    1268:	8e 2d       	mov	r24, r14
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	c8 16       	cp	r12, r24
    126e:	d9 06       	cpc	r13, r25
    1270:	a8 f3       	brcs	.-22     	; 0x125c <vfprintf+0x196>
    1272:	0f c0       	rjmp	.+30     	; 0x1292 <vfprintf+0x1cc>
    1274:	f4 01       	movw	r30, r8
    1276:	17 fd       	sbrc	r17, 7
    1278:	85 91       	lpm	r24, Z+
    127a:	17 ff       	sbrs	r17, 7
    127c:	81 91       	ld	r24, Z+
    127e:	4f 01       	movw	r8, r30
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	b3 01       	movw	r22, r6
    1284:	0e 94 57 0a 	call	0x14ae	; 0x14ae <fputc>
    1288:	e1 10       	cpse	r14, r1
    128a:	ea 94       	dec	r14
    128c:	08 94       	sec
    128e:	c1 08       	sbc	r12, r1
    1290:	d1 08       	sbc	r13, r1
    1292:	c1 14       	cp	r12, r1
    1294:	d1 04       	cpc	r13, r1
    1296:	71 f7       	brne	.-36     	; 0x1274 <vfprintf+0x1ae>
    1298:	e7 c0       	rjmp	.+462    	; 0x1468 <vfprintf+0x3a2>
    129a:	84 36       	cpi	r24, 0x64	; 100
    129c:	11 f0       	breq	.+4      	; 0x12a2 <vfprintf+0x1dc>
    129e:	89 36       	cpi	r24, 0x69	; 105
    12a0:	51 f5       	brne	.+84     	; 0x12f6 <vfprintf+0x230>
    12a2:	f5 01       	movw	r30, r10
    12a4:	17 ff       	sbrs	r17, 7
    12a6:	07 c0       	rjmp	.+14     	; 0x12b6 <vfprintf+0x1f0>
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	a2 81       	ldd	r26, Z+2	; 0x02
    12ae:	b3 81       	ldd	r27, Z+3	; 0x03
    12b0:	24 e0       	ldi	r18, 0x04	; 4
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	08 c0       	rjmp	.+16     	; 0x12c6 <vfprintf+0x200>
    12b6:	80 81       	ld	r24, Z
    12b8:	91 81       	ldd	r25, Z+1	; 0x01
    12ba:	aa 27       	eor	r26, r26
    12bc:	97 fd       	sbrc	r25, 7
    12be:	a0 95       	com	r26
    12c0:	ba 2f       	mov	r27, r26
    12c2:	22 e0       	ldi	r18, 0x02	; 2
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	a2 0e       	add	r10, r18
    12c8:	b3 1e       	adc	r11, r19
    12ca:	01 2f       	mov	r16, r17
    12cc:	0f 76       	andi	r16, 0x6F	; 111
    12ce:	b7 ff       	sbrs	r27, 7
    12d0:	08 c0       	rjmp	.+16     	; 0x12e2 <vfprintf+0x21c>
    12d2:	b0 95       	com	r27
    12d4:	a0 95       	com	r26
    12d6:	90 95       	com	r25
    12d8:	81 95       	neg	r24
    12da:	9f 4f       	sbci	r25, 0xFF	; 255
    12dc:	af 4f       	sbci	r26, 0xFF	; 255
    12de:	bf 4f       	sbci	r27, 0xFF	; 255
    12e0:	00 68       	ori	r16, 0x80	; 128
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	a2 01       	movw	r20, r4
    12e8:	2a e0       	ldi	r18, 0x0A	; 10
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	0e 94 83 0a 	call	0x1506	; 0x1506 <__ultoa_invert>
    12f0:	d8 2e       	mov	r13, r24
    12f2:	d4 18       	sub	r13, r4
    12f4:	3f c0       	rjmp	.+126    	; 0x1374 <vfprintf+0x2ae>
    12f6:	85 37       	cpi	r24, 0x75	; 117
    12f8:	21 f4       	brne	.+8      	; 0x1302 <vfprintf+0x23c>
    12fa:	1f 7e       	andi	r17, 0xEF	; 239
    12fc:	2a e0       	ldi	r18, 0x0A	; 10
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	20 c0       	rjmp	.+64     	; 0x1342 <vfprintf+0x27c>
    1302:	19 7f       	andi	r17, 0xF9	; 249
    1304:	8f 36       	cpi	r24, 0x6F	; 111
    1306:	a9 f0       	breq	.+42     	; 0x1332 <vfprintf+0x26c>
    1308:	80 37       	cpi	r24, 0x70	; 112
    130a:	20 f4       	brcc	.+8      	; 0x1314 <vfprintf+0x24e>
    130c:	88 35       	cpi	r24, 0x58	; 88
    130e:	09 f0       	breq	.+2      	; 0x1312 <vfprintf+0x24c>
    1310:	ae c0       	rjmp	.+348    	; 0x146e <vfprintf+0x3a8>
    1312:	0b c0       	rjmp	.+22     	; 0x132a <vfprintf+0x264>
    1314:	80 37       	cpi	r24, 0x70	; 112
    1316:	21 f0       	breq	.+8      	; 0x1320 <vfprintf+0x25a>
    1318:	88 37       	cpi	r24, 0x78	; 120
    131a:	09 f0       	breq	.+2      	; 0x131e <vfprintf+0x258>
    131c:	a8 c0       	rjmp	.+336    	; 0x146e <vfprintf+0x3a8>
    131e:	01 c0       	rjmp	.+2      	; 0x1322 <vfprintf+0x25c>
    1320:	10 61       	ori	r17, 0x10	; 16
    1322:	14 ff       	sbrs	r17, 4
    1324:	09 c0       	rjmp	.+18     	; 0x1338 <vfprintf+0x272>
    1326:	14 60       	ori	r17, 0x04	; 4
    1328:	07 c0       	rjmp	.+14     	; 0x1338 <vfprintf+0x272>
    132a:	14 ff       	sbrs	r17, 4
    132c:	08 c0       	rjmp	.+16     	; 0x133e <vfprintf+0x278>
    132e:	16 60       	ori	r17, 0x06	; 6
    1330:	06 c0       	rjmp	.+12     	; 0x133e <vfprintf+0x278>
    1332:	28 e0       	ldi	r18, 0x08	; 8
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	05 c0       	rjmp	.+10     	; 0x1342 <vfprintf+0x27c>
    1338:	20 e1       	ldi	r18, 0x10	; 16
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <vfprintf+0x27c>
    133e:	20 e1       	ldi	r18, 0x10	; 16
    1340:	32 e0       	ldi	r19, 0x02	; 2
    1342:	f5 01       	movw	r30, r10
    1344:	17 ff       	sbrs	r17, 7
    1346:	07 c0       	rjmp	.+14     	; 0x1356 <vfprintf+0x290>
    1348:	60 81       	ld	r22, Z
    134a:	71 81       	ldd	r23, Z+1	; 0x01
    134c:	82 81       	ldd	r24, Z+2	; 0x02
    134e:	93 81       	ldd	r25, Z+3	; 0x03
    1350:	44 e0       	ldi	r20, 0x04	; 4
    1352:	50 e0       	ldi	r21, 0x00	; 0
    1354:	06 c0       	rjmp	.+12     	; 0x1362 <vfprintf+0x29c>
    1356:	60 81       	ld	r22, Z
    1358:	71 81       	ldd	r23, Z+1	; 0x01
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	42 e0       	ldi	r20, 0x02	; 2
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	a4 0e       	add	r10, r20
    1364:	b5 1e       	adc	r11, r21
    1366:	a2 01       	movw	r20, r4
    1368:	0e 94 83 0a 	call	0x1506	; 0x1506 <__ultoa_invert>
    136c:	d8 2e       	mov	r13, r24
    136e:	d4 18       	sub	r13, r4
    1370:	01 2f       	mov	r16, r17
    1372:	0f 77       	andi	r16, 0x7F	; 127
    1374:	06 ff       	sbrs	r16, 6
    1376:	09 c0       	rjmp	.+18     	; 0x138a <vfprintf+0x2c4>
    1378:	0e 7f       	andi	r16, 0xFE	; 254
    137a:	df 14       	cp	r13, r15
    137c:	30 f4       	brcc	.+12     	; 0x138a <vfprintf+0x2c4>
    137e:	04 ff       	sbrs	r16, 4
    1380:	06 c0       	rjmp	.+12     	; 0x138e <vfprintf+0x2c8>
    1382:	02 fd       	sbrc	r16, 2
    1384:	04 c0       	rjmp	.+8      	; 0x138e <vfprintf+0x2c8>
    1386:	0f 7e       	andi	r16, 0xEF	; 239
    1388:	02 c0       	rjmp	.+4      	; 0x138e <vfprintf+0x2c8>
    138a:	1d 2d       	mov	r17, r13
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <vfprintf+0x2ca>
    138e:	1f 2d       	mov	r17, r15
    1390:	80 2f       	mov	r24, r16
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	04 ff       	sbrs	r16, 4
    1396:	0c c0       	rjmp	.+24     	; 0x13b0 <vfprintf+0x2ea>
    1398:	fe 01       	movw	r30, r28
    139a:	ed 0d       	add	r30, r13
    139c:	f1 1d       	adc	r31, r1
    139e:	20 81       	ld	r18, Z
    13a0:	20 33       	cpi	r18, 0x30	; 48
    13a2:	11 f4       	brne	.+4      	; 0x13a8 <vfprintf+0x2e2>
    13a4:	09 7e       	andi	r16, 0xE9	; 233
    13a6:	09 c0       	rjmp	.+18     	; 0x13ba <vfprintf+0x2f4>
    13a8:	02 ff       	sbrs	r16, 2
    13aa:	06 c0       	rjmp	.+12     	; 0x13b8 <vfprintf+0x2f2>
    13ac:	1e 5f       	subi	r17, 0xFE	; 254
    13ae:	05 c0       	rjmp	.+10     	; 0x13ba <vfprintf+0x2f4>
    13b0:	86 78       	andi	r24, 0x86	; 134
    13b2:	90 70       	andi	r25, 0x00	; 0
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	09 f0       	breq	.+2      	; 0x13ba <vfprintf+0x2f4>
    13b8:	1f 5f       	subi	r17, 0xFF	; 255
    13ba:	80 2e       	mov	r8, r16
    13bc:	99 24       	eor	r9, r9
    13be:	03 fd       	sbrc	r16, 3
    13c0:	12 c0       	rjmp	.+36     	; 0x13e6 <vfprintf+0x320>
    13c2:	00 ff       	sbrs	r16, 0
    13c4:	0d c0       	rjmp	.+26     	; 0x13e0 <vfprintf+0x31a>
    13c6:	fd 2c       	mov	r15, r13
    13c8:	1e 15       	cp	r17, r14
    13ca:	50 f4       	brcc	.+20     	; 0x13e0 <vfprintf+0x31a>
    13cc:	fe 0c       	add	r15, r14
    13ce:	f1 1a       	sub	r15, r17
    13d0:	1e 2d       	mov	r17, r14
    13d2:	06 c0       	rjmp	.+12     	; 0x13e0 <vfprintf+0x31a>
    13d4:	80 e2       	ldi	r24, 0x20	; 32
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	b3 01       	movw	r22, r6
    13da:	0e 94 57 0a 	call	0x14ae	; 0x14ae <fputc>
    13de:	1f 5f       	subi	r17, 0xFF	; 255
    13e0:	1e 15       	cp	r17, r14
    13e2:	c0 f3       	brcs	.-16     	; 0x13d4 <vfprintf+0x30e>
    13e4:	04 c0       	rjmp	.+8      	; 0x13ee <vfprintf+0x328>
    13e6:	1e 15       	cp	r17, r14
    13e8:	10 f4       	brcc	.+4      	; 0x13ee <vfprintf+0x328>
    13ea:	e1 1a       	sub	r14, r17
    13ec:	01 c0       	rjmp	.+2      	; 0x13f0 <vfprintf+0x32a>
    13ee:	ee 24       	eor	r14, r14
    13f0:	84 fe       	sbrs	r8, 4
    13f2:	0f c0       	rjmp	.+30     	; 0x1412 <vfprintf+0x34c>
    13f4:	80 e3       	ldi	r24, 0x30	; 48
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	b3 01       	movw	r22, r6
    13fa:	0e 94 57 0a 	call	0x14ae	; 0x14ae <fputc>
    13fe:	82 fe       	sbrs	r8, 2
    1400:	1f c0       	rjmp	.+62     	; 0x1440 <vfprintf+0x37a>
    1402:	81 fe       	sbrs	r8, 1
    1404:	03 c0       	rjmp	.+6      	; 0x140c <vfprintf+0x346>
    1406:	88 e5       	ldi	r24, 0x58	; 88
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	10 c0       	rjmp	.+32     	; 0x142c <vfprintf+0x366>
    140c:	88 e7       	ldi	r24, 0x78	; 120
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0d c0       	rjmp	.+26     	; 0x142c <vfprintf+0x366>
    1412:	c4 01       	movw	r24, r8
    1414:	86 78       	andi	r24, 0x86	; 134
    1416:	90 70       	andi	r25, 0x00	; 0
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	91 f0       	breq	.+36     	; 0x1440 <vfprintf+0x37a>
    141c:	81 fc       	sbrc	r8, 1
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <vfprintf+0x35e>
    1420:	80 e2       	ldi	r24, 0x20	; 32
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <vfprintf+0x360>
    1424:	8b e2       	ldi	r24, 0x2B	; 43
    1426:	07 fd       	sbrc	r16, 7
    1428:	8d e2       	ldi	r24, 0x2D	; 45
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	b3 01       	movw	r22, r6
    142e:	0e 94 57 0a 	call	0x14ae	; 0x14ae <fputc>
    1432:	06 c0       	rjmp	.+12     	; 0x1440 <vfprintf+0x37a>
    1434:	80 e3       	ldi	r24, 0x30	; 48
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	b3 01       	movw	r22, r6
    143a:	0e 94 57 0a 	call	0x14ae	; 0x14ae <fputc>
    143e:	fa 94       	dec	r15
    1440:	df 14       	cp	r13, r15
    1442:	c0 f3       	brcs	.-16     	; 0x1434 <vfprintf+0x36e>
    1444:	da 94       	dec	r13
    1446:	f2 01       	movw	r30, r4
    1448:	ed 0d       	add	r30, r13
    144a:	f1 1d       	adc	r31, r1
    144c:	80 81       	ld	r24, Z
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	b3 01       	movw	r22, r6
    1452:	0e 94 57 0a 	call	0x14ae	; 0x14ae <fputc>
    1456:	dd 20       	and	r13, r13
    1458:	a9 f7       	brne	.-22     	; 0x1444 <vfprintf+0x37e>
    145a:	06 c0       	rjmp	.+12     	; 0x1468 <vfprintf+0x3a2>
    145c:	80 e2       	ldi	r24, 0x20	; 32
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	b3 01       	movw	r22, r6
    1462:	0e 94 57 0a 	call	0x14ae	; 0x14ae <fputc>
    1466:	ea 94       	dec	r14
    1468:	ee 20       	and	r14, r14
    146a:	c1 f7       	brne	.-16     	; 0x145c <vfprintf+0x396>
    146c:	40 ce       	rjmp	.-896    	; 0x10ee <vfprintf+0x28>
    146e:	f3 01       	movw	r30, r6
    1470:	86 81       	ldd	r24, Z+6	; 0x06
    1472:	97 81       	ldd	r25, Z+7	; 0x07
    1474:	02 c0       	rjmp	.+4      	; 0x147a <vfprintf+0x3b4>
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	9f ef       	ldi	r25, 0xFF	; 255
    147a:	2d 96       	adiw	r28, 0x0d	; 13
    147c:	e2 e1       	ldi	r30, 0x12	; 18
    147e:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__epilogue_restores__>

00001482 <strnlen_P>:
    1482:	fc 01       	movw	r30, r24
    1484:	05 90       	lpm	r0, Z+
    1486:	61 50       	subi	r22, 0x01	; 1
    1488:	70 40       	sbci	r23, 0x00	; 0
    148a:	01 10       	cpse	r0, r1
    148c:	d8 f7       	brcc	.-10     	; 0x1484 <strnlen_P+0x2>
    148e:	80 95       	com	r24
    1490:	90 95       	com	r25
    1492:	8e 0f       	add	r24, r30
    1494:	9f 1f       	adc	r25, r31
    1496:	08 95       	ret

00001498 <strnlen>:
    1498:	fc 01       	movw	r30, r24
    149a:	61 50       	subi	r22, 0x01	; 1
    149c:	70 40       	sbci	r23, 0x00	; 0
    149e:	01 90       	ld	r0, Z+
    14a0:	01 10       	cpse	r0, r1
    14a2:	d8 f7       	brcc	.-10     	; 0x149a <strnlen+0x2>
    14a4:	80 95       	com	r24
    14a6:	90 95       	com	r25
    14a8:	8e 0f       	add	r24, r30
    14aa:	9f 1f       	adc	r25, r31
    14ac:	08 95       	ret

000014ae <fputc>:
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	8c 01       	movw	r16, r24
    14b8:	eb 01       	movw	r28, r22
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	81 ff       	sbrs	r24, 1
    14be:	1b c0       	rjmp	.+54     	; 0x14f6 <fputc+0x48>
    14c0:	82 ff       	sbrs	r24, 2
    14c2:	0d c0       	rjmp	.+26     	; 0x14de <fputc+0x30>
    14c4:	2e 81       	ldd	r18, Y+6	; 0x06
    14c6:	3f 81       	ldd	r19, Y+7	; 0x07
    14c8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ca:	9d 81       	ldd	r25, Y+5	; 0x05
    14cc:	28 17       	cp	r18, r24
    14ce:	39 07       	cpc	r19, r25
    14d0:	64 f4       	brge	.+24     	; 0x14ea <fputc+0x3c>
    14d2:	e8 81       	ld	r30, Y
    14d4:	f9 81       	ldd	r31, Y+1	; 0x01
    14d6:	01 93       	st	Z+, r16
    14d8:	f9 83       	std	Y+1, r31	; 0x01
    14da:	e8 83       	st	Y, r30
    14dc:	06 c0       	rjmp	.+12     	; 0x14ea <fputc+0x3c>
    14de:	e8 85       	ldd	r30, Y+8	; 0x08
    14e0:	f9 85       	ldd	r31, Y+9	; 0x09
    14e2:	80 2f       	mov	r24, r16
    14e4:	09 95       	icall
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	31 f4       	brne	.+12     	; 0x14f6 <fputc+0x48>
    14ea:	8e 81       	ldd	r24, Y+6	; 0x06
    14ec:	9f 81       	ldd	r25, Y+7	; 0x07
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	9f 83       	std	Y+7, r25	; 0x07
    14f2:	8e 83       	std	Y+6, r24	; 0x06
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <fputc+0x4c>
    14f6:	0f ef       	ldi	r16, 0xFF	; 255
    14f8:	1f ef       	ldi	r17, 0xFF	; 255
    14fa:	c8 01       	movw	r24, r16
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	08 95       	ret

00001506 <__ultoa_invert>:
    1506:	fa 01       	movw	r30, r20
    1508:	aa 27       	eor	r26, r26
    150a:	28 30       	cpi	r18, 0x08	; 8
    150c:	51 f1       	breq	.+84     	; 0x1562 <__ultoa_invert+0x5c>
    150e:	20 31       	cpi	r18, 0x10	; 16
    1510:	81 f1       	breq	.+96     	; 0x1572 <__ultoa_invert+0x6c>
    1512:	e8 94       	clt
    1514:	6f 93       	push	r22
    1516:	6e 7f       	andi	r22, 0xFE	; 254
    1518:	6e 5f       	subi	r22, 0xFE	; 254
    151a:	7f 4f       	sbci	r23, 0xFF	; 255
    151c:	8f 4f       	sbci	r24, 0xFF	; 255
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	af 4f       	sbci	r26, 0xFF	; 255
    1522:	b1 e0       	ldi	r27, 0x01	; 1
    1524:	3e d0       	rcall	.+124    	; 0x15a2 <__ultoa_invert+0x9c>
    1526:	b4 e0       	ldi	r27, 0x04	; 4
    1528:	3c d0       	rcall	.+120    	; 0x15a2 <__ultoa_invert+0x9c>
    152a:	67 0f       	add	r22, r23
    152c:	78 1f       	adc	r23, r24
    152e:	89 1f       	adc	r24, r25
    1530:	9a 1f       	adc	r25, r26
    1532:	a1 1d       	adc	r26, r1
    1534:	68 0f       	add	r22, r24
    1536:	79 1f       	adc	r23, r25
    1538:	8a 1f       	adc	r24, r26
    153a:	91 1d       	adc	r25, r1
    153c:	a1 1d       	adc	r26, r1
    153e:	6a 0f       	add	r22, r26
    1540:	71 1d       	adc	r23, r1
    1542:	81 1d       	adc	r24, r1
    1544:	91 1d       	adc	r25, r1
    1546:	a1 1d       	adc	r26, r1
    1548:	20 d0       	rcall	.+64     	; 0x158a <__ultoa_invert+0x84>
    154a:	09 f4       	brne	.+2      	; 0x154e <__ultoa_invert+0x48>
    154c:	68 94       	set
    154e:	3f 91       	pop	r19
    1550:	2a e0       	ldi	r18, 0x0A	; 10
    1552:	26 9f       	mul	r18, r22
    1554:	11 24       	eor	r1, r1
    1556:	30 19       	sub	r19, r0
    1558:	30 5d       	subi	r19, 0xD0	; 208
    155a:	31 93       	st	Z+, r19
    155c:	de f6       	brtc	.-74     	; 0x1514 <__ultoa_invert+0xe>
    155e:	cf 01       	movw	r24, r30
    1560:	08 95       	ret
    1562:	46 2f       	mov	r20, r22
    1564:	47 70       	andi	r20, 0x07	; 7
    1566:	40 5d       	subi	r20, 0xD0	; 208
    1568:	41 93       	st	Z+, r20
    156a:	b3 e0       	ldi	r27, 0x03	; 3
    156c:	0f d0       	rcall	.+30     	; 0x158c <__ultoa_invert+0x86>
    156e:	c9 f7       	brne	.-14     	; 0x1562 <__ultoa_invert+0x5c>
    1570:	f6 cf       	rjmp	.-20     	; 0x155e <__ultoa_invert+0x58>
    1572:	46 2f       	mov	r20, r22
    1574:	4f 70       	andi	r20, 0x0F	; 15
    1576:	40 5d       	subi	r20, 0xD0	; 208
    1578:	4a 33       	cpi	r20, 0x3A	; 58
    157a:	18 f0       	brcs	.+6      	; 0x1582 <__ultoa_invert+0x7c>
    157c:	49 5d       	subi	r20, 0xD9	; 217
    157e:	31 fd       	sbrc	r19, 1
    1580:	40 52       	subi	r20, 0x20	; 32
    1582:	41 93       	st	Z+, r20
    1584:	02 d0       	rcall	.+4      	; 0x158a <__ultoa_invert+0x84>
    1586:	a9 f7       	brne	.-22     	; 0x1572 <__ultoa_invert+0x6c>
    1588:	ea cf       	rjmp	.-44     	; 0x155e <__ultoa_invert+0x58>
    158a:	b4 e0       	ldi	r27, 0x04	; 4
    158c:	a6 95       	lsr	r26
    158e:	97 95       	ror	r25
    1590:	87 95       	ror	r24
    1592:	77 95       	ror	r23
    1594:	67 95       	ror	r22
    1596:	ba 95       	dec	r27
    1598:	c9 f7       	brne	.-14     	; 0x158c <__ultoa_invert+0x86>
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	61 05       	cpc	r22, r1
    159e:	71 05       	cpc	r23, r1
    15a0:	08 95       	ret
    15a2:	9b 01       	movw	r18, r22
    15a4:	ac 01       	movw	r20, r24
    15a6:	0a 2e       	mov	r0, r26
    15a8:	06 94       	lsr	r0
    15aa:	57 95       	ror	r21
    15ac:	47 95       	ror	r20
    15ae:	37 95       	ror	r19
    15b0:	27 95       	ror	r18
    15b2:	ba 95       	dec	r27
    15b4:	c9 f7       	brne	.-14     	; 0x15a8 <__ultoa_invert+0xa2>
    15b6:	62 0f       	add	r22, r18
    15b8:	73 1f       	adc	r23, r19
    15ba:	84 1f       	adc	r24, r20
    15bc:	95 1f       	adc	r25, r21
    15be:	a0 1d       	adc	r26, r0
    15c0:	08 95       	ret

000015c2 <__prologue_saves__>:
    15c2:	2f 92       	push	r2
    15c4:	3f 92       	push	r3
    15c6:	4f 92       	push	r4
    15c8:	5f 92       	push	r5
    15ca:	6f 92       	push	r6
    15cc:	7f 92       	push	r7
    15ce:	8f 92       	push	r8
    15d0:	9f 92       	push	r9
    15d2:	af 92       	push	r10
    15d4:	bf 92       	push	r11
    15d6:	cf 92       	push	r12
    15d8:	df 92       	push	r13
    15da:	ef 92       	push	r14
    15dc:	ff 92       	push	r15
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	ca 1b       	sub	r28, r26
    15ec:	db 0b       	sbc	r29, r27
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	09 94       	ijmp

000015fa <__epilogue_restores__>:
    15fa:	2a 88       	ldd	r2, Y+18	; 0x12
    15fc:	39 88       	ldd	r3, Y+17	; 0x11
    15fe:	48 88       	ldd	r4, Y+16	; 0x10
    1600:	5f 84       	ldd	r5, Y+15	; 0x0f
    1602:	6e 84       	ldd	r6, Y+14	; 0x0e
    1604:	7d 84       	ldd	r7, Y+13	; 0x0d
    1606:	8c 84       	ldd	r8, Y+12	; 0x0c
    1608:	9b 84       	ldd	r9, Y+11	; 0x0b
    160a:	aa 84       	ldd	r10, Y+10	; 0x0a
    160c:	b9 84       	ldd	r11, Y+9	; 0x09
    160e:	c8 84       	ldd	r12, Y+8	; 0x08
    1610:	df 80       	ldd	r13, Y+7	; 0x07
    1612:	ee 80       	ldd	r14, Y+6	; 0x06
    1614:	fd 80       	ldd	r15, Y+5	; 0x05
    1616:	0c 81       	ldd	r16, Y+4	; 0x04
    1618:	1b 81       	ldd	r17, Y+3	; 0x03
    161a:	aa 81       	ldd	r26, Y+2	; 0x02
    161c:	b9 81       	ldd	r27, Y+1	; 0x01
    161e:	ce 0f       	add	r28, r30
    1620:	d1 1d       	adc	r29, r1
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	ed 01       	movw	r28, r26
    162e:	08 95       	ret

00001630 <_exit>:
    1630:	f8 94       	cli

00001632 <__stop_program>:
    1632:	ff cf       	rjmp	.-2      	; 0x1632 <__stop_program>
